Grading at Fri Jan  3 06:49:28 UTC 2020
Running 'make clean' to do a clean build of your project
rm -rf *.o poker *~
Running 'make poker OTHERFLAGS=-O3' to build your project
gcc -Wall -Werror -ggdb3 -std=gnu99 -pedantic -O3 -c cards.c
gcc -Wall -Werror -ggdb3 -std=gnu99 -pedantic -O3 -c deck.c
gcc -Wall -Werror -ggdb3 -std=gnu99 -pedantic -O3 -c eval.c
gcc -Wall -Werror -ggdb3 -std=gnu99 -pedantic -O3 -c future.c
gcc -Wall -Werror -ggdb3 -std=gnu99 -pedantic -O3 -c input.c
gcc -Wall -Werror -ggdb3 -std=gnu99 -pedantic -O3 -c main.c
gcc -o poker -Wall -Werror -ggdb3 -std=gnu99 -pedantic -O3 cards.o deck.o eval.o future.o input.o main.o
 - Starting with some Texas Hold'em hands
Running a simulation with 20000 draws for 2 hands...
Valgrind reported errors:
==1806== Memcheck, a memory error detector
==1806== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==1806== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==1806== Command: ./poker inp.txt 20000
==1806== Parent PID: 1805
==1806== 
==1806== Invalid read of size 8
==1806==    at 0x400BCA: main (main.c:47)
==1806==  Address 0x5206c90 is 0 bytes after a block of size 16 alloc'd
==1806==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==1806==    by 0x40335A: read_input (input.c:43)
==1806==    by 0x400B2C: main (main.c:34)
==1806== 
==1806== Invalid read of size 8
==1806==    at 0x402F72: compare_hands (eval.c:133)
==1806==    by 0x400BDA: main (main.c:47)
==1806==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==1806== 
==1806== 
==1806== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==1806==  Access not within mapped region at address 0x8
==1806==    at 0x402F72: compare_hands (eval.c:133)
==1806==    by 0x400BDA: main (main.c:47)
==1806==  If you believe this happened as a result of a stack
==1806==  overflow in your program's main thread (unlikely but
==1806==  possible), you can try to increase the size of the
==1806==  main thread stack using the --main-stacksize= flag.
==1806==  The main thread stack size used in this run was 8388608.
==1806== 
==1806== HEAP SUMMARY:
==1806==     in use at exit: 1,892 bytes in 89 blocks
==1806==   total heap usage: 214 allocs, 125 frees, 17,196 bytes allocated
==1806== 
==1806== LEAK SUMMARY:
==1806==    definitely lost: 124 bytes in 13 blocks
==1806==    indirectly lost: 88 bytes in 4 blocks
==1806==      possibly lost: 0 bytes in 0 blocks
==1806==    still reachable: 1,680 bytes in 72 blocks
==1806==         suppressed: 0 bytes in 0 blocks
==1806== Rerun with --leak-check=full to see details of leaked memory
==1806== 
==1806== For counts of detected and suppressed errors, rerun with: -v
==1806== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Running a simulation with 25000 draws for 3 hands...
Valgrind reported errors:
==1811== Memcheck, a memory error detector
==1811== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==1811== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==1811== Command: ./poker inp.txt 25000
==1811== Parent PID: 1810
==1811== 
==1811== Invalid read of size 8
==1811==    at 0x400BCA: main (main.c:47)
==1811==  Address 0x5207848 is 0 bytes after a block of size 24 alloc'd
==1811==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==1811==    by 0x40335A: read_input (input.c:43)
==1811==    by 0x400B2C: main (main.c:34)
==1811== 
==1811== Invalid read of size 8
==1811==    at 0x402F72: compare_hands (eval.c:133)
==1811==    by 0x400BDA: main (main.c:47)
==1811==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==1811== 
==1811== 
==1811== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==1811==  Access not within mapped region at address 0x8
==1811==    at 0x402F72: compare_hands (eval.c:133)
==1811==    by 0x400BDA: main (main.c:47)
==1811==  If you believe this happened as a result of a stack
==1811==  overflow in your program's main thread (unlikely but
==1811==  possible), you can try to increase the size of the
==1811==  main thread stack using the --main-stacksize= flag.
==1811==  The main thread stack size used in this run was 8388608.
==1811== 
==1811== HEAP SUMMARY:
==1811==     in use at exit: 2,080 bytes in 101 blocks
==1811==   total heap usage: 261 allocs, 160 frees, 18,232 bytes allocated
==1811== 
==1811== LEAK SUMMARY:
==1811==    definitely lost: 176 bytes in 18 blocks
==1811==    indirectly lost: 176 bytes in 8 blocks
==1811==      possibly lost: 0 bytes in 0 blocks
==1811==    still reachable: 1,728 bytes in 75 blocks
==1811==         suppressed: 0 bytes in 0 blocks
==1811== Rerun with --leak-check=full to see details of leaked memory
==1811== 
==1811== For counts of detected and suppressed errors, rerun with: -v
==1811== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Running a simulation with 25000 draws for 3 hands...
Valgrind reported errors:
==1816== Memcheck, a memory error detector
==1816== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==1816== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==1816== Command: ./poker inp2.txt 25000
==1816== Parent PID: 1815
==1816== 
==1816== Invalid read of size 8
==1816==    at 0x400BCA: main (main.c:47)
==1816==  Address 0x5207848 is 0 bytes after a block of size 24 alloc'd
==1816==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==1816==    by 0x40335A: read_input (input.c:43)
==1816==    by 0x400B2C: main (main.c:34)
==1816== 
==1816== Invalid read of size 8
==1816==    at 0x402F72: compare_hands (eval.c:133)
==1816==    by 0x400BDA: main (main.c:47)
==1816==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==1816== 
==1816== 
==1816== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==1816==  Access not within mapped region at address 0x8
==1816==    at 0x402F72: compare_hands (eval.c:133)
==1816==    by 0x400BDA: main (main.c:47)
==1816==  If you believe this happened as a result of a stack
==1816==  overflow in your program's main thread (unlikely but
==1816==  possible), you can try to increase the size of the
==1816==  main thread stack using the --main-stacksize= flag.
==1816==  The main thread stack size used in this run was 8388608.
==1816== 
==1816== HEAP SUMMARY:
==1816==     in use at exit: 2,080 bytes in 101 blocks
==1816==   total heap usage: 261 allocs, 160 frees, 18,232 bytes allocated
==1816== 
==1816== LEAK SUMMARY:
==1816==    definitely lost: 176 bytes in 18 blocks
==1816==    indirectly lost: 176 bytes in 8 blocks
==1816==      possibly lost: 0 bytes in 0 blocks
==1816==    still reachable: 1,728 bytes in 75 blocks
==1816==         suppressed: 0 bytes in 0 blocks
==1816== Rerun with --leak-check=full to see details of leaked memory
==1816== 
==1816== For counts of detected and suppressed errors, rerun with: -v
==1816== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Running a simulation with 25000 draws for 2 hands...
Valgrind reported errors:
==1821== Memcheck, a memory error detector
==1821== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==1821== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==1821== Command: ./poker inp2.txt 25000
==1821== Parent PID: 1820
==1821== 
==1821== Invalid read of size 8
==1821==    at 0x400BCA: main (main.c:47)
==1821==  Address 0x5206c90 is 0 bytes after a block of size 16 alloc'd
==1821==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==1821==    by 0x40335A: read_input (input.c:43)
==1821==    by 0x400B2C: main (main.c:34)
==1821== 
==1821== Invalid read of size 8
==1821==    at 0x402F72: compare_hands (eval.c:133)
==1821==    by 0x400BDA: main (main.c:47)
==1821==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==1821== 
==1821== 
==1821== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==1821==  Access not within mapped region at address 0x8
==1821==    at 0x402F72: compare_hands (eval.c:133)
==1821==    by 0x400BDA: main (main.c:47)
==1821==  If you believe this happened as a result of a stack
==1821==  overflow in your program's main thread (unlikely but
==1821==  possible), you can try to increase the size of the
==1821==  main thread stack using the --main-stacksize= flag.
==1821==  The main thread stack size used in this run was 8388608.
==1821== 
==1821== HEAP SUMMARY:
==1821==     in use at exit: 1,892 bytes in 89 blocks
==1821==   total heap usage: 214 allocs, 125 frees, 17,196 bytes allocated
==1821== 
==1821== LEAK SUMMARY:
==1821==    definitely lost: 124 bytes in 13 blocks
==1821==    indirectly lost: 88 bytes in 4 blocks
==1821==      possibly lost: 0 bytes in 0 blocks
==1821==    still reachable: 1,680 bytes in 72 blocks
==1821==         suppressed: 0 bytes in 0 blocks
==1821== Rerun with --leak-check=full to see details of leaked memory
==1821== 
==1821== For counts of detected and suppressed errors, rerun with: -v
==1821== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Running a simulation with 80000 draws for 4 hands...
Valgrind reported errors:
==1826== Memcheck, a memory error detector
==1826== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==1826== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==1826== Command: ./poker inp3.txt 80000
==1826== Parent PID: 1825
==1826== 
==1826== Invalid read of size 8
==1826==    at 0x400BCA: main (main.c:47)
==1826==  Address 0x52076f0 is 0 bytes after a block of size 32 alloc'd
==1826==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==1826==    by 0x40335A: read_input (input.c:43)
==1826==    by 0x400B2C: main (main.c:34)
==1826== 
==1826== Invalid read of size 8
==1826==    at 0x402F72: compare_hands (eval.c:133)
==1826==    by 0x400BDA: main (main.c:47)
==1826==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==1826== 
==1826== 
==1826== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==1826==  Access not within mapped region at address 0x8
==1826==    at 0x402F72: compare_hands (eval.c:133)
==1826==    by 0x400BDA: main (main.c:47)
==1826==  If you believe this happened as a result of a stack
==1826==  overflow in your program's main thread (unlikely but
==1826==  possible), you can try to increase the size of the
==1826==  main thread stack using the --main-stacksize= flag.
==1826==  The main thread stack size used in this run was 8388608.
==1826== 
==1826== HEAP SUMMARY:
==1826==     in use at exit: 1,980 bytes in 95 blocks
==1826==   total heap usage: 263 allocs, 168 frees, 18,132 bytes allocated
==1826== 
==1826== LEAK SUMMARY:
==1826==    definitely lost: 132 bytes in 11 blocks
==1826==    indirectly lost: 336 bytes in 21 blocks
==1826==      possibly lost: 0 bytes in 0 blocks
==1826==    still reachable: 1,512 bytes in 63 blocks
==1826==         suppressed: 0 bytes in 0 blocks
==1826== Rerun with --leak-check=full to see details of leaked memory
==1826== 
==1826== For counts of detected and suppressed errors, rerun with: -v
==1826== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Running a simulation with 30000 draws for 2 hands...
Valgrind reported errors:
==1831== Memcheck, a memory error detector
==1831== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==1831== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==1831== Command: ./poker inp.txt 30000
==1831== Parent PID: 1830
==1831== 
==1831== Invalid read of size 8
==1831==    at 0x400BCA: main (main.c:47)
==1831==  Address 0x5206570 is 0 bytes after a block of size 16 alloc'd
==1831==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==1831==    by 0x40335A: read_input (input.c:43)
==1831==    by 0x400B2C: main (main.c:34)
==1831== 
==1831== Invalid read of size 8
==1831==    at 0x402F72: compare_hands (eval.c:133)
==1831==    by 0x400BDA: main (main.c:47)
==1831==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==1831== 
==1831== 
==1831== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==1831==  Access not within mapped region at address 0x8
==1831==    at 0x402F72: compare_hands (eval.c:133)
==1831==    by 0x400BDA: main (main.c:47)
==1831==  If you believe this happened as a result of a stack
==1831==  overflow in your program's main thread (unlikely but
==1831==  possible), you can try to increase the size of the
==1831==  main thread stack using the --main-stacksize= flag.
==1831==  The main thread stack size used in this run was 8388608.
==1831== 
==1831== HEAP SUMMARY:
==1831==     in use at exit: 1,700 bytes in 77 blocks
==1831==   total heap usage: 187 allocs, 110 frees, 15,720 bytes allocated
==1831== 
==1831== LEAK SUMMARY:
==1831==    definitely lost: 76 bytes in 7 blocks
==1831==    indirectly lost: 112 bytes in 7 blocks
==1831==      possibly lost: 0 bytes in 0 blocks
==1831==    still reachable: 1,512 bytes in 63 blocks
==1831==         suppressed: 0 bytes in 0 blocks
==1831== Rerun with --leak-check=full to see details of leaked memory
==1831== 
==1831== For counts of detected and suppressed errors, rerun with: -v
==1831== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
 - Next, few Seven Card Stud hands
Running a simulation with 30000 draws for 2 hands...
Valgrind reported errors:
==1836== Memcheck, a memory error detector
==1836== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==1836== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==1836== Command: ./poker inp.txt 30000
==1836== Parent PID: 1835
==1836== 
==1836== Invalid read of size 8
==1836==    at 0x400BCA: main (main.c:47)
==1836==  Address 0x5206cc0 is 0 bytes after a block of size 16 alloc'd
==1836==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==1836==    by 0x40335A: read_input (input.c:43)
==1836==    by 0x400B2C: main (main.c:34)
==1836== 
==1836== Invalid read of size 8
==1836==    at 0x402F72: compare_hands (eval.c:133)
==1836==    by 0x400BDA: main (main.c:47)
==1836==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==1836== 
==1836== 
==1836== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==1836==  Access not within mapped region at address 0x8
==1836==    at 0x402F72: compare_hands (eval.c:133)
==1836==    by 0x400BDA: main (main.c:47)
==1836==  If you believe this happened as a result of a stack
==1836==  overflow in your program's main thread (unlikely but
==1836==  possible), you can try to increase the size of the
==1836==  main thread stack using the --main-stacksize= flag.
==1836==  The main thread stack size used in this run was 8388608.
==1836== 
==1836== HEAP SUMMARY:
==1836==     in use at exit: 1,876 bytes in 88 blocks
==1836==   total heap usage: 207 allocs, 119 frees, 16,680 bytes allocated
==1836== 
==1836== LEAK SUMMARY:
==1836==    definitely lost: 108 bytes in 11 blocks
==1836==    indirectly lost: 88 bytes in 4 blocks
==1836==      possibly lost: 0 bytes in 0 blocks
==1836==    still reachable: 1,680 bytes in 73 blocks
==1836==         suppressed: 0 bytes in 0 blocks
==1836== Rerun with --leak-check=full to see details of leaked memory
==1836== 
==1836== For counts of detected and suppressed errors, rerun with: -v
==1836== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Running a simulation with 40000 draws for 3 hands...
Valgrind reported errors:
==1841== Memcheck, a memory error detector
==1841== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==1841== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==1841== Command: ./poker inp2.txt 40000
==1841== Parent PID: 1840
==1841== 
==1841== Invalid read of size 8
==1841==    at 0x400BCA: main (main.c:47)
==1841==  Address 0x5207538 is 0 bytes after a block of size 24 alloc'd
==1841==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==1841==    by 0x40335A: read_input (input.c:43)
==1841==    by 0x400B2C: main (main.c:34)
==1841== 
==1841== Invalid read of size 8
==1841==    at 0x402F72: compare_hands (eval.c:133)
==1841==    by 0x400BDA: main (main.c:47)
==1841==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==1841== 
==1841== 
==1841== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==1841==  Access not within mapped region at address 0x8
==1841==    at 0x402F72: compare_hands (eval.c:133)
==1841==    by 0x400BDA: main (main.c:47)
==1841==  If you believe this happened as a result of a stack
==1841==  overflow in your program's main thread (unlikely but
==1841==  possible), you can try to increase the size of the
==1841==  main thread stack using the --main-stacksize= flag.
==1841==  The main thread stack size used in this run was 8388608.
==1841== 
==1841== HEAP SUMMARY:
==1841==     in use at exit: 1,952 bytes in 93 blocks
==1841==   total heap usage: 235 allocs, 142 frees, 16,348 bytes allocated
==1841== 
==1841== LEAK SUMMARY:
==1841==    definitely lost: 128 bytes in 12 blocks
==1841==    indirectly lost: 208 bytes in 12 blocks
==1841==      possibly lost: 0 bytes in 0 blocks
==1841==    still reachable: 1,616 bytes in 69 blocks
==1841==         suppressed: 0 bytes in 0 blocks
==1841== Rerun with --leak-check=full to see details of leaked memory
==1841== 
==1841== For counts of detected and suppressed errors, rerun with: -v
==1841== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
 - Then one from a completely made up poker variant
Running a simulation with 100000 draws for 6 hands...
Valgrind reported errors:
==1846== Memcheck, a memory error detector
==1846== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==1846== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==1846== Command: ./poker whacky.txt 100000
==1846== Parent PID: 1845
==1846== 
==1846== Invalid read of size 8
==1846==    at 0x400BCA: main (main.c:47)
==1846==  Address 0x5209030 is 0 bytes after a block of size 48 alloc'd
==1846==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==1846==    by 0x40335A: read_input (input.c:43)
==1846==    by 0x400B2C: main (main.c:34)
==1846== 
==1846== Invalid read of size 8
==1846==    at 0x402F72: compare_hands (eval.c:133)
==1846==    by 0x400BDA: main (main.c:47)
==1846==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==1846== 
==1846== 
==1846== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==1846==  Access not within mapped region at address 0x8
==1846==    at 0x402F72: compare_hands (eval.c:133)
==1846==    by 0x400BDA: main (main.c:47)
==1846==  If you believe this happened as a result of a stack
==1846==  overflow in your program's main thread (unlikely but
==1846==  possible), you can try to increase the size of the
==1846==  main thread stack using the --main-stacksize= flag.
==1846==  The main thread stack size used in this run was 8388608.
==1846== 
==1846== HEAP SUMMARY:
==1846==     in use at exit: 2,340 bytes in 118 blocks
==1846==   total heap usage: 351 allocs, 233 frees, 21,196 bytes allocated
==1846== 
==1846== LEAK SUMMARY:
==1846==    definitely lost: 236 bytes in 21 blocks
==1846==    indirectly lost: 520 bytes in 30 blocks
==1846==      possibly lost: 0 bytes in 0 blocks
==1846==    still reachable: 1,584 bytes in 67 blocks
==1846==         suppressed: 0 bytes in 0 blocks
==1846== Rerun with --leak-check=full to see details of leaked memory
==1846== 
==1846== For counts of detected and suppressed errors, rerun with: -v
==1846== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)

Overall Grade: F
