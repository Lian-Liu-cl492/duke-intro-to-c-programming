Grading at Sun Aug 18 19:07:51 UTC 2019
Compiling your code
rm -f test poker cards.o my-test-main.o *~
cc -ggdb3 -Wall -Werror -pedantic -std=gnu99   -c -o deck.o deck.c
cc -ggdb3 -Wall -Werror -pedantic -std=gnu99   -c -o eval.o eval.c
cc -ggdb3 -Wall -Werror -pedantic -std=gnu99   -c -o cards.o cards.c
gcc -o test-eval -ggdb3 deck.o deck-c4.o eval-c4.o eval.o test-eval.o cards.o input.o future.o
Testcase 1: Trying hands with nothing
Valgrind returned an error status
==875== Memcheck, a memory error detector
==875== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==875== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==875== Command: ./test-eval inp.1.txt
==875== Parent PID: 874
==875== 
==875== Conditional jump or move depends on uninitialised value(s)
==875==    at 0x402BC6: ranking_to_string (cards.c:13)
==875==    by 0x402804: describe_hand (test-eval.c:69)
==875==    by 0x402A25: main (test-eval.c:116)
==875== 
==875== Conditional jump or move depends on uninitialised value(s)
==875==    at 0x402BC6: ranking_to_string (cards.c:13)
==875==    by 0x402804: describe_hand (test-eval.c:69)
==875==    by 0x402A45: main (test-eval.c:119)
==875== 
==875== Conditional jump or move depends on uninitialised value(s)
==875==    at 0x401B66: compare_hands (eval.c:136)
==875==    by 0x402A9A: main (test-eval.c:124)
==875== 
==875== Conditional jump or move depends on uninitialised value(s)
==875==    at 0x401B77: compare_hands (eval.c:138)
==875==    by 0x402A9A: main (test-eval.c:124)
==875== 
==875== 
==875== HEAP SUMMARY:
==875==     in use at exit: 0 bytes in 0 blocks
==875==   total heap usage: 278 allocs, 278 frees, 13,728 bytes allocated
==875== 
==875== All heap blocks were freed -- no leaks are possible
==875== 
==875== For counts of detected and suppressed errors, rerun with: -v
==875== Use --track-origins=yes to see where uninitialised values come from
==875== ERROR SUMMARY: 20 errors from 4 contexts (suppressed: 0 from 0)
Testcase 2: Trying hands with pairs
Valgrind returned an error status
==880== Memcheck, a memory error detector
==880== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==880== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==880== Command: ./test-eval inp.2.txt
==880== Parent PID: 879
==880== 
==880== Conditional jump or move depends on uninitialised value(s)
==880==    at 0x402BC6: ranking_to_string (cards.c:13)
==880==    by 0x402804: describe_hand (test-eval.c:69)
==880==    by 0x402A25: main (test-eval.c:116)
==880== 
==880== Conditional jump or move depends on uninitialised value(s)
==880==    at 0x402BC6: ranking_to_string (cards.c:13)
==880==    by 0x402804: describe_hand (test-eval.c:69)
==880==    by 0x402A45: main (test-eval.c:119)
==880== 
==880== Conditional jump or move depends on uninitialised value(s)
==880==    at 0x401B66: compare_hands (eval.c:136)
==880==    by 0x402A9A: main (test-eval.c:124)
==880== 
==880== Conditional jump or move depends on uninitialised value(s)
==880==    at 0x401B77: compare_hands (eval.c:138)
==880==    by 0x402A9A: main (test-eval.c:124)
==880== 
==880== 
==880== HEAP SUMMARY:
==880==     in use at exit: 0 bytes in 0 blocks
==880==   total heap usage: 232 allocs, 232 frees, 13,028 bytes allocated
==880== 
==880== All heap blocks were freed -- no leaks are possible
==880== 
==880== For counts of detected and suppressed errors, rerun with: -v
==880== Use --track-origins=yes to see where uninitialised values come from
==880== ERROR SUMMARY: 16 errors from 4 contexts (suppressed: 0 from 0)
Testcase 3: Trying hands with 2 pairs
Valgrind returned an error status
==885== Memcheck, a memory error detector
==885== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==885== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==885== Command: ./test-eval inp.3.txt
==885== Parent PID: 884
==885== 
==885== Conditional jump or move depends on uninitialised value(s)
==885==    at 0x402BC6: ranking_to_string (cards.c:13)
==885==    by 0x402804: describe_hand (test-eval.c:69)
==885==    by 0x402A25: main (test-eval.c:116)
==885== 
==885== Conditional jump or move depends on uninitialised value(s)
==885==    at 0x402BC6: ranking_to_string (cards.c:13)
==885==    by 0x402804: describe_hand (test-eval.c:69)
==885==    by 0x402A45: main (test-eval.c:119)
==885== 
==885== Conditional jump or move depends on uninitialised value(s)
==885==    at 0x401B66: compare_hands (eval.c:136)
==885==    by 0x402A9A: main (test-eval.c:124)
==885== 
==885== Conditional jump or move depends on uninitialised value(s)
==885==    at 0x401B77: compare_hands (eval.c:138)
==885==    by 0x402A9A: main (test-eval.c:124)
==885== 
==885== 
==885== HEAP SUMMARY:
==885==     in use at exit: 0 bytes in 0 blocks
==885==   total heap usage: 544 allocs, 544 frees, 18,344 bytes allocated
==885== 
==885== All heap blocks were freed -- no leaks are possible
==885== 
==885== For counts of detected and suppressed errors, rerun with: -v
==885== Use --track-origins=yes to see where uninitialised values come from
==885== ERROR SUMMARY: 40 errors from 4 contexts (suppressed: 0 from 0)
Testcase 4: Trying hands with 3 of a kind
Valgrind returned an error status
==890== Memcheck, a memory error detector
==890== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==890== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==890== Command: ./test-eval inp.4.txt
==890== Parent PID: 889
==890== 
==890== Conditional jump or move depends on uninitialised value(s)
==890==    at 0x402BC6: ranking_to_string (cards.c:13)
==890==    by 0x402804: describe_hand (test-eval.c:69)
==890==    by 0x402A25: main (test-eval.c:116)
==890== 
==890== Conditional jump or move depends on uninitialised value(s)
==890==    at 0x402BC6: ranking_to_string (cards.c:13)
==890==    by 0x402804: describe_hand (test-eval.c:69)
==890==    by 0x402A45: main (test-eval.c:119)
==890== 
==890== Conditional jump or move depends on uninitialised value(s)
==890==    at 0x401B66: compare_hands (eval.c:136)
==890==    by 0x402A9A: main (test-eval.c:124)
==890== 
==890== Conditional jump or move depends on uninitialised value(s)
==890==    at 0x401B77: compare_hands (eval.c:138)
==890==    by 0x402A9A: main (test-eval.c:124)
==890== 
==890== 
==890== HEAP SUMMARY:
==890==     in use at exit: 0 bytes in 0 blocks
==890==   total heap usage: 352 allocs, 352 frees, 15,296 bytes allocated
==890== 
==890== All heap blocks were freed -- no leaks are possible
==890== 
==890== For counts of detected and suppressed errors, rerun with: -v
==890== Use --track-origins=yes to see where uninitialised values come from
==890== ERROR SUMMARY: 24 errors from 4 contexts (suppressed: 0 from 0)
Testcase 5: Trying hands with straights
Valgrind returned an error status
==895== Memcheck, a memory error detector
==895== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==895== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==895== Command: ./test-eval inp.5.txt
==895== Parent PID: 894
==895== 
==895== Conditional jump or move depends on uninitialised value(s)
==895==    at 0x402BC6: ranking_to_string (cards.c:13)
==895==    by 0x402804: describe_hand (test-eval.c:69)
==895==    by 0x402A25: main (test-eval.c:116)
==895== 
==895== Conditional jump or move depends on uninitialised value(s)
==895==    at 0x401B66: compare_hands (eval.c:136)
==895==    by 0x402A9A: main (test-eval.c:124)
==895== 
==895== Conditional jump or move depends on uninitialised value(s)
==895==    at 0x402BC6: ranking_to_string (cards.c:13)
==895==    by 0x402804: describe_hand (test-eval.c:69)
==895==    by 0x402A45: main (test-eval.c:119)
==895== 
==895== Conditional jump or move depends on uninitialised value(s)
==895==    at 0x401B77: compare_hands (eval.c:138)
==895==    by 0x402A9A: main (test-eval.c:124)
==895== 
==895== 
==895== HEAP SUMMARY:
==895==     in use at exit: 0 bytes in 0 blocks
==895==   total heap usage: 360 allocs, 360 frees, 15,704 bytes allocated
==895== 
==895== All heap blocks were freed -- no leaks are possible
==895== 
==895== For counts of detected and suppressed errors, rerun with: -v
==895== Use --track-origins=yes to see where uninitialised values come from
==895== ERROR SUMMARY: 9 errors from 4 contexts (suppressed: 0 from 0)
Testcase 6: Trying hands with flushes
 Checking the output 
Your file matched the expected output
 - Testcase passed
Testcase 7: Trying hands with full houses
Valgrind returned an error status
==912== Memcheck, a memory error detector
==912== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==912== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==912== Command: ./test-eval inp.7.txt
==912== Parent PID: 911
==912== 
==912== Conditional jump or move depends on uninitialised value(s)
==912==    at 0x402BC6: ranking_to_string (cards.c:13)
==912==    by 0x402804: describe_hand (test-eval.c:69)
==912==    by 0x402A25: main (test-eval.c:116)
==912== 
==912== Conditional jump or move depends on uninitialised value(s)
==912==    at 0x402BC6: ranking_to_string (cards.c:13)
==912==    by 0x402804: describe_hand (test-eval.c:69)
==912==    by 0x402A45: main (test-eval.c:119)
==912== 
==912== Conditional jump or move depends on uninitialised value(s)
==912==    at 0x401B66: compare_hands (eval.c:136)
==912==    by 0x402A9A: main (test-eval.c:124)
==912== 
==912== Conditional jump or move depends on uninitialised value(s)
==912==    at 0x401B77: compare_hands (eval.c:138)
==912==    by 0x402A9A: main (test-eval.c:124)
==912== 
==912== 
==912== HEAP SUMMARY:
==912==     in use at exit: 0 bytes in 0 blocks
==912==   total heap usage: 636 allocs, 636 frees, 21,404 bytes allocated
==912== 
==912== All heap blocks were freed -- no leaks are possible
==912== 
==912== For counts of detected and suppressed errors, rerun with: -v
==912== Use --track-origins=yes to see where uninitialised values come from
==912== ERROR SUMMARY: 40 errors from 4 contexts (suppressed: 0 from 0)
Testcase 8: Trying hands with 4 of a kind
Valgrind returned an error status
==917== Memcheck, a memory error detector
==917== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==917== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==917== Command: ./test-eval inp.8.txt
==917== Parent PID: 916
==917== 
==917== Conditional jump or move depends on uninitialised value(s)
==917==    at 0x402BC6: ranking_to_string (cards.c:13)
==917==    by 0x402804: describe_hand (test-eval.c:69)
==917==    by 0x402A25: main (test-eval.c:116)
==917== 
==917== Conditional jump or move depends on uninitialised value(s)
==917==    at 0x402BC6: ranking_to_string (cards.c:13)
==917==    by 0x402804: describe_hand (test-eval.c:69)
==917==    by 0x402A45: main (test-eval.c:119)
==917== 
==917== Conditional jump or move depends on uninitialised value(s)
==917==    at 0x401B66: compare_hands (eval.c:136)
==917==    by 0x402A9A: main (test-eval.c:124)
==917== 
==917== Conditional jump or move depends on uninitialised value(s)
==917==    at 0x401B77: compare_hands (eval.c:138)
==917==    by 0x402A9A: main (test-eval.c:124)
==917== 
==917== 
==917== HEAP SUMMARY:
==917==     in use at exit: 0 bytes in 0 blocks
==917==   total heap usage: 352 allocs, 352 frees, 15,296 bytes allocated
==917== 
==917== All heap blocks were freed -- no leaks are possible
==917== 
==917== For counts of detected and suppressed errors, rerun with: -v
==917== Use --track-origins=yes to see where uninitialised values come from
==917== ERROR SUMMARY: 24 errors from 4 contexts (suppressed: 0 from 0)
Testcase 9: Trying hands with straight flushes
 Checking the output 
Line_54_did_not_match
Line_63_did_not_match
Line_75_did_not_match
Line_76_did_not_match
Line_83_did_not_match
Line_84_did_not_match
Line_87_did_not_match
Line_104_did_not_match
Line_105_did_not_match
Line_108_did_not_match
Your file did not match the expected ouput
 - Output did not match, testcase failed
Hand 1:								Hand 1:
--------							--------
As Ks Qs Js 0s 						      |	AsKsQsJs0s
 - Flush in suit s						 - Flush in suit s
 - Straight flush at index 0					 - Straight flush at index 0
 - The most of a kind is 1 of a kind (at index 0 / value A)	 - The most of a kind is 1 of a kind (at index 0 / value A)
 - No secondary pair						 - No secondary pair
 - evaluate_hand's ranking: STRAIGHT_FLUSH			 - evaluate_hand's ranking: STRAIGHT_FLUSH
 - 5 cards used for hand: As Ks Qs Js 0s 		      |	 - 5 cards used for hand: AsKsQsJs0s
Hand 2:								Hand 2:
--------							--------
Kh Qh Jh 0h 9h 						      |	KhQhJh0h9h
 - Flush in suit h						 - Flush in suit h
 - Straight flush at index 0					 - Straight flush at index 0
 - The most of a kind is 1 of a kind (at index 0 / value K)	 - The most of a kind is 1 of a kind (at index 0 / value K)
 - No secondary pair						 - No secondary pair
 - evaluate_hand's ranking: STRAIGHT_FLUSH			 - evaluate_hand's ranking: STRAIGHT_FLUSH
 - 5 cards used for hand: Kh Qh Jh 0h 9h 		      |	 - 5 cards used for hand: KhQhJh0h9h
Comparison : 							Comparison : 
--------------							--------------
Hand 1 wins!							Hand 1 wins!
============================					============================
Hand 1:								Hand 1:
--------							--------
As Ks Qs Js 0s 9s 8s 					      |	AsKsQsJs0s9s8s
 - Flush in suit s						 - Flush in suit s
 - Straight flush at index 0					 - Straight flush at index 0
 - Straight flush at index 1					 - Straight flush at index 1
 - Straight flush at index 2				      <
 - The most of a kind is 1 of a kind (at index 0 / value A)	 - The most of a kind is 1 of a kind (at index 0 / value A)
 - No secondary pair						 - No secondary pair
 - evaluate_hand's ranking: STRAIGHT_FLUSH			 - evaluate_hand's ranking: STRAIGHT_FLUSH
 - 5 cards used for hand: As Ks Qs Js 0s 		      |	 - 5 cards used for hand: AsKsQsJs0s
Hand 2:								Hand 2:
--------							--------
Kh Qh Jh 0h 9h 8h 7h 					      |	KhQhJh0h9h8h7h
 - Flush in suit h						 - Flush in suit h
 - Straight flush at index 0					 - Straight flush at index 0
 - Straight flush at index 1					 - Straight flush at index 1
 - Straight flush at index 2				      <
 - The most of a kind is 1 of a kind (at index 0 / value K)	 - The most of a kind is 1 of a kind (at index 0 / value K)
 - No secondary pair						 - No secondary pair
 - evaluate_hand's ranking: STRAIGHT_FLUSH			 - evaluate_hand's ranking: STRAIGHT_FLUSH
 - 5 cards used for hand: Kh Qh Jh 0h 9h 		      |	 - 5 cards used for hand: KhQhJh0h9h
Comparison : 							Comparison : 
--------------							--------------
Hand 1 wins!							Hand 1 wins!
============================					============================
Hand 1:								Hand 1:
--------							--------
Ac As Kc Ks Qs Js 0s 					      |	AcAsKcKsQsJs0s
 - Flush in suit s						 - Flush in suit s
 - Straight at index 0						 - Straight at index 0
 - Straight flush at index 1				      <
 - The most of a kind is 2 of a kind (at index 0 / value A)	 - The most of a kind is 2 of a kind (at index 0 / value A)
 - Secondary pair at index 2 (value K)				 - Secondary pair at index 2 (value K)
 - evaluate_hand's ranking: STRAIGHT_FLUSH		      |	 - evaluate_hand's ranking: FLUSH
 - 5 cards used for hand: As Ks Qs Js 0s 		      |	 - 5 cards used for hand: AsKsQsJs0s
Hand 2:								Hand 2:
--------							--------
Ad Kh Qh Jh Js 0h 9h 					      |	AdKhQhJhJs0h9h
 - Flush in suit h						 - Flush in suit h
 - Straight at index 0						 - Straight at index 0
 - Straight flush at index 1				      <
 - The most of a kind is 2 of a kind (at index 3 / value J)	 - The most of a kind is 2 of a kind (at index 3 / value J)
 - No secondary pair						 - No secondary pair
 - evaluate_hand's ranking: STRAIGHT_FLUSH		      |	 - evaluate_hand's ranking: FLUSH
 - 5 cards used for hand: Kh Qh Jh 0h 9h 		      |	 - 5 cards used for hand: KhQhJh0h9h
Comparison : 							Comparison : 
--------------							--------------
Hand 1 wins!							Hand 1 wins!
============================					============================
Hand 1:								Hand 1:
--------							--------
Ah Kc 5h 4h 3h 2h 					      |	AhKc5h4h3h2h
 - Flush in suit h						 - Flush in suit h
 - Straight flush at index 0				      <
 - The most of a kind is 1 of a kind (at index 0 / value A)	 - The most of a kind is 1 of a kind (at index 0 / value A)
 - No secondary pair						 - No secondary pair
 - evaluate_hand's ranking: STRAIGHT_FLUSH		      |	 - evaluate_hand's ranking: FLUSH
 - 5 cards used for hand: 5h 4h 3h 2h Ah 		      |	 - 5 cards used for hand: Ah5h4h3h2h
Hand 2:								Hand 2:
--------							--------
Ac 6c 5c 4c 3c 2c 					      |	Ac6c5c4c3c2c
 - Flush in suit c						 - Flush in suit c
 - Straight flush at index 0				      <
 - Straight flush at index 1				      <
 - The most of a kind is 1 of a kind (at index 0 / value A)	 - The most of a kind is 1 of a kind (at index 0 / value A)
 - No secondary pair						 - No secondary pair
 - evaluate_hand's ranking: STRAIGHT_FLUSH		      |	 - evaluate_hand's ranking: FLUSH
 - 5 cards used for hand: 5c 4c 3c 2c Ac 		      |	 - 5 cards used for hand: Ac6c5c4c3c
Comparison : 							Comparison : 
--------------							--------------
Tie							      |	Hand 2 wins!
============================					============================
Hand 1:								Hand 1:
--------							--------
As Ks Qs Js 0s 						      |	AsKsQsJs0s
 - Flush in suit s						 - Flush in suit s
 - Straight flush at index 0					 - Straight flush at index 0
 - The most of a kind is 1 of a kind (at index 0 / value A)	 - The most of a kind is 1 of a kind (at index 0 / value A)
 - No secondary pair						 - No secondary pair
 - evaluate_hand's ranking: STRAIGHT_FLUSH			 - evaluate_hand's ranking: STRAIGHT_FLUSH
 - 5 cards used for hand: As Ks Qs Js 0s 		      |	 - 5 cards used for hand: AsKsQsJs0s
Hand 2:								Hand 2:
--------							--------
As 5s 4s 3s 2s 						      |	As5s4s3s2s
 - Flush in suit s						 - Flush in suit s
 - Straight flush at index 0				      <
 - The most of a kind is 1 of a kind (at index 0 / value A)	 - The most of a kind is 1 of a kind (at index 0 / value A)
 - No secondary pair						 - No secondary pair
 - evaluate_hand's ranking: STRAIGHT_FLUSH		      |	 - evaluate_hand's ranking: FLUSH
 - 5 cards used for hand: 5s 4s 3s 2s As 		      |	 - 5 cards used for hand: As5s4s3s2s
Comparison : 							Comparison : 
--------------							--------------
Hand 1 wins!						      |	Hand 2 wins!
============================					============================
Testcase 10: Trying each type of hand ranking
Valgrind returned an error status
==935== Memcheck, a memory error detector
==935== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==935== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==935== Command: ./test-eval inp.10.txt
==935== Parent PID: 934
==935== 
==935== Conditional jump or move depends on uninitialised value(s)
==935==    at 0x402BC6: ranking_to_string (cards.c:13)
==935==    by 0x402804: describe_hand (test-eval.c:69)
==935==    by 0x402A45: main (test-eval.c:119)
==935== 
==935== Conditional jump or move depends on uninitialised value(s)
==935==    at 0x401B66: compare_hands (eval.c:136)
==935==    by 0x402A9A: main (test-eval.c:124)
==935== 
==935== Conditional jump or move depends on uninitialised value(s)
==935==    at 0x401B77: compare_hands (eval.c:138)
==935==    by 0x402A9A: main (test-eval.c:124)
==935== 
==935== Conditional jump or move depends on uninitialised value(s)
==935==    at 0x402BC6: ranking_to_string (cards.c:13)
==935==    by 0x402804: describe_hand (test-eval.c:69)
==935==    by 0x402A25: main (test-eval.c:116)
==935== 
==935== 
==935== HEAP SUMMARY:
==935==     in use at exit: 0 bytes in 0 blocks
==935==   total heap usage: 3,988 allocs, 3,988 frees, 80,704 bytes allocated
==935== 
==935== All heap blocks were freed -- no leaks are possible
==935== 
==935== For counts of detected and suppressed errors, rerun with: -v
==935== Use --track-origins=yes to see where uninitialised values come from
==935== ERROR SUMMARY: 210 errors from 4 contexts (suppressed: 0 from 0)

Overall Grade: F
