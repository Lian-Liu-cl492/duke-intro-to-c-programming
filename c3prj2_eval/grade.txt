Grading at Sun Aug 18 19:07:17 UTC 2019
Compiling your code
rm -f test poker cards.o my-test-main.o *~
cc -ggdb3 -Wall -Werror -pedantic -std=gnu99   -c -o deck.o deck.c
cc -ggdb3 -Wall -Werror -pedantic -std=gnu99   -c -o eval.o eval.c
cc -ggdb3 -Wall -Werror -pedantic -std=gnu99   -c -o cards.o cards.c
gcc -o test-eval -ggdb3 deck.o deck-c4.o eval-c4.o eval.o test-eval.o cards.o input.o future.o
Testcase 1: Trying hands with nothing
Valgrind returned an error status
==677== Memcheck, a memory error detector
==677== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==677== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==677== Command: ./test-eval inp.1.txt
==677== Parent PID: 676
==677== 
==677== Conditional jump or move depends on uninitialised value(s)
==677==    at 0x402BEC: ranking_to_string (cards.c:13)
==677==    by 0x40282A: describe_hand (test-eval.c:69)
==677==    by 0x402A4B: main (test-eval.c:116)
==677== 
==677== Conditional jump or move depends on uninitialised value(s)
==677==    at 0x402BEC: ranking_to_string (cards.c:13)
==677==    by 0x40282A: describe_hand (test-eval.c:69)
==677==    by 0x402A6B: main (test-eval.c:119)
==677== 
==677== Conditional jump or move depends on uninitialised value(s)
==677==    at 0x401B8C: compare_hands (eval.c:137)
==677==    by 0x402AC0: main (test-eval.c:124)
==677== 
==677== Conditional jump or move depends on uninitialised value(s)
==677==    at 0x401B9D: compare_hands (eval.c:139)
==677==    by 0x402AC0: main (test-eval.c:124)
==677== 
==677== 
==677== HEAP SUMMARY:
==677==     in use at exit: 0 bytes in 0 blocks
==677==   total heap usage: 278 allocs, 278 frees, 13,728 bytes allocated
==677== 
==677== All heap blocks were freed -- no leaks are possible
==677== 
==677== For counts of detected and suppressed errors, rerun with: -v
==677== Use --track-origins=yes to see where uninitialised values come from
==677== ERROR SUMMARY: 20 errors from 4 contexts (suppressed: 0 from 0)
Testcase 2: Trying hands with pairs
Valgrind returned an error status
==682== Memcheck, a memory error detector
==682== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==682== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==682== Command: ./test-eval inp.2.txt
==682== Parent PID: 681
==682== 
==682== Conditional jump or move depends on uninitialised value(s)
==682==    at 0x402BEC: ranking_to_string (cards.c:13)
==682==    by 0x40282A: describe_hand (test-eval.c:69)
==682==    by 0x402A4B: main (test-eval.c:116)
==682== 
==682== Conditional jump or move depends on uninitialised value(s)
==682==    at 0x402BEC: ranking_to_string (cards.c:13)
==682==    by 0x40282A: describe_hand (test-eval.c:69)
==682==    by 0x402A6B: main (test-eval.c:119)
==682== 
==682== Conditional jump or move depends on uninitialised value(s)
==682==    at 0x401B8C: compare_hands (eval.c:137)
==682==    by 0x402AC0: main (test-eval.c:124)
==682== 
==682== Conditional jump or move depends on uninitialised value(s)
==682==    at 0x401B9D: compare_hands (eval.c:139)
==682==    by 0x402AC0: main (test-eval.c:124)
==682== 
==682== 
==682== HEAP SUMMARY:
==682==     in use at exit: 0 bytes in 0 blocks
==682==   total heap usage: 232 allocs, 232 frees, 13,028 bytes allocated
==682== 
==682== All heap blocks were freed -- no leaks are possible
==682== 
==682== For counts of detected and suppressed errors, rerun with: -v
==682== Use --track-origins=yes to see where uninitialised values come from
==682== ERROR SUMMARY: 16 errors from 4 contexts (suppressed: 0 from 0)
Testcase 3: Trying hands with 2 pairs
Valgrind returned an error status
==687== Memcheck, a memory error detector
==687== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==687== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==687== Command: ./test-eval inp.3.txt
==687== Parent PID: 686
==687== 
==687== Conditional jump or move depends on uninitialised value(s)
==687==    at 0x402BEC: ranking_to_string (cards.c:13)
==687==    by 0x40282A: describe_hand (test-eval.c:69)
==687==    by 0x402A4B: main (test-eval.c:116)
==687== 
==687== Conditional jump or move depends on uninitialised value(s)
==687==    at 0x402BEC: ranking_to_string (cards.c:13)
==687==    by 0x40282A: describe_hand (test-eval.c:69)
==687==    by 0x402A6B: main (test-eval.c:119)
==687== 
==687== Conditional jump or move depends on uninitialised value(s)
==687==    at 0x401B8C: compare_hands (eval.c:137)
==687==    by 0x402AC0: main (test-eval.c:124)
==687== 
==687== Conditional jump or move depends on uninitialised value(s)
==687==    at 0x401B9D: compare_hands (eval.c:139)
==687==    by 0x402AC0: main (test-eval.c:124)
==687== 
==687== 
==687== HEAP SUMMARY:
==687==     in use at exit: 0 bytes in 0 blocks
==687==   total heap usage: 544 allocs, 544 frees, 18,344 bytes allocated
==687== 
==687== All heap blocks were freed -- no leaks are possible
==687== 
==687== For counts of detected and suppressed errors, rerun with: -v
==687== Use --track-origins=yes to see where uninitialised values come from
==687== ERROR SUMMARY: 40 errors from 4 contexts (suppressed: 0 from 0)
Testcase 4: Trying hands with 3 of a kind
Valgrind returned an error status
==692== Memcheck, a memory error detector
==692== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==692== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==692== Command: ./test-eval inp.4.txt
==692== Parent PID: 691
==692== 
==692== Conditional jump or move depends on uninitialised value(s)
==692==    at 0x402BEC: ranking_to_string (cards.c:13)
==692==    by 0x40282A: describe_hand (test-eval.c:69)
==692==    by 0x402A4B: main (test-eval.c:116)
==692== 
==692== Conditional jump or move depends on uninitialised value(s)
==692==    at 0x402BEC: ranking_to_string (cards.c:13)
==692==    by 0x40282A: describe_hand (test-eval.c:69)
==692==    by 0x402A6B: main (test-eval.c:119)
==692== 
==692== Conditional jump or move depends on uninitialised value(s)
==692==    at 0x401B8C: compare_hands (eval.c:137)
==692==    by 0x402AC0: main (test-eval.c:124)
==692== 
==692== Conditional jump or move depends on uninitialised value(s)
==692==    at 0x401B9D: compare_hands (eval.c:139)
==692==    by 0x402AC0: main (test-eval.c:124)
==692== 
==692== 
==692== HEAP SUMMARY:
==692==     in use at exit: 0 bytes in 0 blocks
==692==   total heap usage: 352 allocs, 352 frees, 15,296 bytes allocated
==692== 
==692== All heap blocks were freed -- no leaks are possible
==692== 
==692== For counts of detected and suppressed errors, rerun with: -v
==692== Use --track-origins=yes to see where uninitialised values come from
==692== ERROR SUMMARY: 24 errors from 4 contexts (suppressed: 0 from 0)
Testcase 5: Trying hands with straights
Valgrind returned an error status
==697== Memcheck, a memory error detector
==697== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==697== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==697== Command: ./test-eval inp.5.txt
==697== Parent PID: 696
==697== 
==697== Conditional jump or move depends on uninitialised value(s)
==697==    at 0x402BEC: ranking_to_string (cards.c:13)
==697==    by 0x40282A: describe_hand (test-eval.c:69)
==697==    by 0x402A4B: main (test-eval.c:116)
==697== 
==697== Conditional jump or move depends on uninitialised value(s)
==697==    at 0x401B8C: compare_hands (eval.c:137)
==697==    by 0x402AC0: main (test-eval.c:124)
==697== 
==697== Conditional jump or move depends on uninitialised value(s)
==697==    at 0x402BEC: ranking_to_string (cards.c:13)
==697==    by 0x40282A: describe_hand (test-eval.c:69)
==697==    by 0x402A6B: main (test-eval.c:119)
==697== 
==697== Conditional jump or move depends on uninitialised value(s)
==697==    at 0x401B9D: compare_hands (eval.c:139)
==697==    by 0x402AC0: main (test-eval.c:124)
==697== 
==697== 
==697== HEAP SUMMARY:
==697==     in use at exit: 0 bytes in 0 blocks
==697==   total heap usage: 360 allocs, 360 frees, 15,704 bytes allocated
==697== 
==697== All heap blocks were freed -- no leaks are possible
==697== 
==697== For counts of detected and suppressed errors, rerun with: -v
==697== Use --track-origins=yes to see where uninitialised values come from
==697== ERROR SUMMARY: 9 errors from 4 contexts (suppressed: 0 from 0)
Testcase 6: Trying hands with flushes
 Checking the output 
Your file matched the expected output
 - Testcase passed
Testcase 7: Trying hands with full houses
Valgrind returned an error status
==714== Memcheck, a memory error detector
==714== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==714== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==714== Command: ./test-eval inp.7.txt
==714== Parent PID: 713
==714== 
==714== Conditional jump or move depends on uninitialised value(s)
==714==    at 0x402BEC: ranking_to_string (cards.c:13)
==714==    by 0x40282A: describe_hand (test-eval.c:69)
==714==    by 0x402A4B: main (test-eval.c:116)
==714== 
==714== Conditional jump or move depends on uninitialised value(s)
==714==    at 0x402BEC: ranking_to_string (cards.c:13)
==714==    by 0x40282A: describe_hand (test-eval.c:69)
==714==    by 0x402A6B: main (test-eval.c:119)
==714== 
==714== Conditional jump or move depends on uninitialised value(s)
==714==    at 0x401B8C: compare_hands (eval.c:137)
==714==    by 0x402AC0: main (test-eval.c:124)
==714== 
==714== Conditional jump or move depends on uninitialised value(s)
==714==    at 0x401B9D: compare_hands (eval.c:139)
==714==    by 0x402AC0: main (test-eval.c:124)
==714== 
==714== 
==714== HEAP SUMMARY:
==714==     in use at exit: 0 bytes in 0 blocks
==714==   total heap usage: 636 allocs, 636 frees, 21,404 bytes allocated
==714== 
==714== All heap blocks were freed -- no leaks are possible
==714== 
==714== For counts of detected and suppressed errors, rerun with: -v
==714== Use --track-origins=yes to see where uninitialised values come from
==714== ERROR SUMMARY: 40 errors from 4 contexts (suppressed: 0 from 0)
Testcase 8: Trying hands with 4 of a kind
Valgrind returned an error status
==719== Memcheck, a memory error detector
==719== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==719== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==719== Command: ./test-eval inp.8.txt
==719== Parent PID: 718
==719== 
==719== Conditional jump or move depends on uninitialised value(s)
==719==    at 0x402BEC: ranking_to_string (cards.c:13)
==719==    by 0x40282A: describe_hand (test-eval.c:69)
==719==    by 0x402A4B: main (test-eval.c:116)
==719== 
==719== Conditional jump or move depends on uninitialised value(s)
==719==    at 0x402BEC: ranking_to_string (cards.c:13)
==719==    by 0x40282A: describe_hand (test-eval.c:69)
==719==    by 0x402A6B: main (test-eval.c:119)
==719== 
==719== Conditional jump or move depends on uninitialised value(s)
==719==    at 0x401B8C: compare_hands (eval.c:137)
==719==    by 0x402AC0: main (test-eval.c:124)
==719== 
==719== Conditional jump or move depends on uninitialised value(s)
==719==    at 0x401B9D: compare_hands (eval.c:139)
==719==    by 0x402AC0: main (test-eval.c:124)
==719== 
==719== 
==719== HEAP SUMMARY:
==719==     in use at exit: 0 bytes in 0 blocks
==719==   total heap usage: 352 allocs, 352 frees, 15,296 bytes allocated
==719== 
==719== All heap blocks were freed -- no leaks are possible
==719== 
==719== For counts of detected and suppressed errors, rerun with: -v
==719== Use --track-origins=yes to see where uninitialised values come from
==719== ERROR SUMMARY: 24 errors from 4 contexts (suppressed: 0 from 0)
Testcase 9: Trying hands with straight flushes
 Checking the output 
Line_54_did_not_match
Line_63_did_not_match
Line_75_did_not_match
Line_76_did_not_match
Line_83_did_not_match
Line_84_did_not_match
Line_87_did_not_match
Line_104_did_not_match
Line_105_did_not_match
Line_108_did_not_match
Your file did not match the expected ouput
 - Output did not match, testcase failed
Hand 1:								Hand 1:
--------							--------
As Ks Qs Js 0s 						      |	AsKsQsJs0s
 - Flush in suit s						 - Flush in suit s
 - Straight flush at index 0					 - Straight flush at index 0
 - The most of a kind is 1 of a kind (at index 0 / value A)	 - The most of a kind is 1 of a kind (at index 0 / value A)
 - No secondary pair						 - No secondary pair
 - evaluate_hand's ranking: STRAIGHT_FLUSH			 - evaluate_hand's ranking: STRAIGHT_FLUSH
 - 5 cards used for hand: As Ks Qs Js 0s 		      |	 - 5 cards used for hand: AsKsQsJs0s
Hand 2:								Hand 2:
--------							--------
Kh Qh Jh 0h 9h 						      |	KhQhJh0h9h
 - Flush in suit h						 - Flush in suit h
 - Straight flush at index 0					 - Straight flush at index 0
 - The most of a kind is 1 of a kind (at index 0 / value K)	 - The most of a kind is 1 of a kind (at index 0 / value K)
 - No secondary pair						 - No secondary pair
 - evaluate_hand's ranking: STRAIGHT_FLUSH			 - evaluate_hand's ranking: STRAIGHT_FLUSH
 - 5 cards used for hand: Kh Qh Jh 0h 9h 		      |	 - 5 cards used for hand: KhQhJh0h9h
Comparison : 							Comparison : 
--------------							--------------
Hand 1 wins!							Hand 1 wins!
============================					============================
Hand 1:								Hand 1:
--------							--------
As Ks Qs Js 0s 9s 8s 					      |	AsKsQsJs0s9s8s
 - Flush in suit s						 - Flush in suit s
 - Straight flush at index 0					 - Straight flush at index 0
 - Straight flush at index 1					 - Straight flush at index 1
 - Straight flush at index 2				      <
 - The most of a kind is 1 of a kind (at index 0 / value A)	 - The most of a kind is 1 of a kind (at index 0 / value A)
 - No secondary pair						 - No secondary pair
 - evaluate_hand's ranking: STRAIGHT_FLUSH			 - evaluate_hand's ranking: STRAIGHT_FLUSH
 - 5 cards used for hand: As Ks Qs Js 0s 		      |	 - 5 cards used for hand: AsKsQsJs0s
Hand 2:								Hand 2:
--------							--------
Kh Qh Jh 0h 9h 8h 7h 					      |	KhQhJh0h9h8h7h
 - Flush in suit h						 - Flush in suit h
 - Straight flush at index 0					 - Straight flush at index 0
 - Straight flush at index 1					 - Straight flush at index 1
 - Straight flush at index 2				      <
 - The most of a kind is 1 of a kind (at index 0 / value K)	 - The most of a kind is 1 of a kind (at index 0 / value K)
 - No secondary pair						 - No secondary pair
 - evaluate_hand's ranking: STRAIGHT_FLUSH			 - evaluate_hand's ranking: STRAIGHT_FLUSH
 - 5 cards used for hand: Kh Qh Jh 0h 9h 		      |	 - 5 cards used for hand: KhQhJh0h9h
Comparison : 							Comparison : 
--------------							--------------
Hand 1 wins!							Hand 1 wins!
============================					============================
Hand 1:								Hand 1:
--------							--------
Ac As Kc Ks Qs Js 0s 					      |	AcAsKcKsQsJs0s
 - Flush in suit s						 - Flush in suit s
 - Straight at index 0						 - Straight at index 0
 - Straight flush at index 1				      <
 - The most of a kind is 2 of a kind (at index 0 / value A)	 - The most of a kind is 2 of a kind (at index 0 / value A)
 - Secondary pair at index 2 (value K)				 - Secondary pair at index 2 (value K)
 - evaluate_hand's ranking: STRAIGHT_FLUSH		      |	 - evaluate_hand's ranking: FLUSH
 - 5 cards used for hand: As Ks Qs Js 0s 		      |	 - 5 cards used for hand: AsKsQsJs0s
Hand 2:								Hand 2:
--------							--------
Ad Kh Qh Jh Js 0h 9h 					      |	AdKhQhJhJs0h9h
 - Flush in suit h						 - Flush in suit h
 - Straight at index 0						 - Straight at index 0
 - Straight flush at index 1				      <
 - The most of a kind is 2 of a kind (at index 3 / value J)	 - The most of a kind is 2 of a kind (at index 3 / value J)
 - No secondary pair						 - No secondary pair
 - evaluate_hand's ranking: STRAIGHT_FLUSH		      |	 - evaluate_hand's ranking: FLUSH
 - 5 cards used for hand: Kh Qh Jh 0h 9h 		      |	 - 5 cards used for hand: KhQhJh0h9h
Comparison : 							Comparison : 
--------------							--------------
Hand 1 wins!							Hand 1 wins!
============================					============================
Hand 1:								Hand 1:
--------							--------
Ah Kc 5h 4h 3h 2h 					      |	AhKc5h4h3h2h
 - Flush in suit h						 - Flush in suit h
 - Straight flush at index 0				      <
 - The most of a kind is 1 of a kind (at index 0 / value A)	 - The most of a kind is 1 of a kind (at index 0 / value A)
 - No secondary pair						 - No secondary pair
 - evaluate_hand's ranking: STRAIGHT_FLUSH		      |	 - evaluate_hand's ranking: FLUSH
 - 5 cards used for hand: 5h 4h 3h 2h Ah 		      |	 - 5 cards used for hand: Ah5h4h3h2h
Hand 2:								Hand 2:
--------							--------
Ac 6c 5c 4c 3c 2c 					      |	Ac6c5c4c3c2c
 - Flush in suit c						 - Flush in suit c
 - Straight flush at index 0				      <
 - Straight flush at index 1				      <
 - The most of a kind is 1 of a kind (at index 0 / value A)	 - The most of a kind is 1 of a kind (at index 0 / value A)
 - No secondary pair						 - No secondary pair
 - evaluate_hand's ranking: STRAIGHT_FLUSH		      |	 - evaluate_hand's ranking: FLUSH
 - 5 cards used for hand: 5c 4c 3c 2c Ac 		      |	 - 5 cards used for hand: Ac6c5c4c3c
Comparison : 							Comparison : 
--------------							--------------
Tie							      |	Hand 2 wins!
============================					============================
Hand 1:								Hand 1:
--------							--------
As Ks Qs Js 0s 						      |	AsKsQsJs0s
 - Flush in suit s						 - Flush in suit s
 - Straight flush at index 0					 - Straight flush at index 0
 - The most of a kind is 1 of a kind (at index 0 / value A)	 - The most of a kind is 1 of a kind (at index 0 / value A)
 - No secondary pair						 - No secondary pair
 - evaluate_hand's ranking: STRAIGHT_FLUSH			 - evaluate_hand's ranking: STRAIGHT_FLUSH
 - 5 cards used for hand: As Ks Qs Js 0s 		      |	 - 5 cards used for hand: AsKsQsJs0s
Hand 2:								Hand 2:
--------							--------
As 5s 4s 3s 2s 						      |	As5s4s3s2s
 - Flush in suit s						 - Flush in suit s
 - Straight flush at index 0				      <
 - The most of a kind is 1 of a kind (at index 0 / value A)	 - The most of a kind is 1 of a kind (at index 0 / value A)
 - No secondary pair						 - No secondary pair
 - evaluate_hand's ranking: STRAIGHT_FLUSH		      |	 - evaluate_hand's ranking: FLUSH
 - 5 cards used for hand: 5s 4s 3s 2s As 		      |	 - 5 cards used for hand: As5s4s3s2s
Comparison : 							Comparison : 
--------------							--------------
Hand 1 wins!						      |	Hand 2 wins!
============================					============================
Testcase 10: Trying each type of hand ranking
Valgrind returned an error status
==737== Memcheck, a memory error detector
==737== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==737== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==737== Command: ./test-eval inp.10.txt
==737== Parent PID: 736
==737== 
==737== Conditional jump or move depends on uninitialised value(s)
==737==    at 0x402BEC: ranking_to_string (cards.c:13)
==737==    by 0x40282A: describe_hand (test-eval.c:69)
==737==    by 0x402A6B: main (test-eval.c:119)
==737== 
==737== Conditional jump or move depends on uninitialised value(s)
==737==    at 0x401B8C: compare_hands (eval.c:137)
==737==    by 0x402AC0: main (test-eval.c:124)
==737== 
==737== Conditional jump or move depends on uninitialised value(s)
==737==    at 0x401B9D: compare_hands (eval.c:139)
==737==    by 0x402AC0: main (test-eval.c:124)
==737== 
==737== Conditional jump or move depends on uninitialised value(s)
==737==    at 0x402BEC: ranking_to_string (cards.c:13)
==737==    by 0x40282A: describe_hand (test-eval.c:69)
==737==    by 0x402A4B: main (test-eval.c:116)
==737== 
==737== 
==737== HEAP SUMMARY:
==737==     in use at exit: 0 bytes in 0 blocks
==737==   total heap usage: 3,988 allocs, 3,988 frees, 80,704 bytes allocated
==737== 
==737== All heap blocks were freed -- no leaks are possible
==737== 
==737== For counts of detected and suppressed errors, rerun with: -v
==737== Use --track-origins=yes to see where uninitialised values come from
==737== ERROR SUMMARY: 210 errors from 4 contexts (suppressed: 0 from 0)

Overall Grade: F
