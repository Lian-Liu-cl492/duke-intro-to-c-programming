Grading at Sun Aug 18 19:47:44 UTC 2019
Compiling your code
rm -f test poker cards.o my-test-main.o *~
cc -ggdb3 -Wall -Werror -pedantic -std=gnu99   -c -o deck.o deck.c
cc -ggdb3 -Wall -Werror -pedantic -std=gnu99   -c -o eval.o eval.c
cc -ggdb3 -Wall -Werror -pedantic -std=gnu99   -c -o cards.o cards.c
gcc -o test-eval -ggdb3 deck.o deck-c4.o eval-c4.o eval.o test-eval.o cards.o input.o future.o
Testcase 1: Trying hands with nothing
Valgrind returned an error status
==1087== Memcheck, a memory error detector
==1087== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==1087== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==1087== Command: ./test-eval inp.1.txt
==1087== Parent PID: 1086
==1087== 
==1087== Conditional jump or move depends on uninitialised value(s)
==1087==    at 0x402BC2: ranking_to_string (cards.c:13)
==1087==    by 0x402800: describe_hand (test-eval.c:69)
==1087==    by 0x402A21: main (test-eval.c:116)
==1087== 
==1087== Conditional jump or move depends on uninitialised value(s)
==1087==    at 0x402BC2: ranking_to_string (cards.c:13)
==1087==    by 0x402800: describe_hand (test-eval.c:69)
==1087==    by 0x402A41: main (test-eval.c:119)
==1087== 
==1087== Conditional jump or move depends on uninitialised value(s)
==1087==    at 0x401B62: compare_hands (eval.c:136)
==1087==    by 0x402A96: main (test-eval.c:124)
==1087== 
==1087== Conditional jump or move depends on uninitialised value(s)
==1087==    at 0x401B73: compare_hands (eval.c:138)
==1087==    by 0x402A96: main (test-eval.c:124)
==1087== 
==1087== 
==1087== HEAP SUMMARY:
==1087==     in use at exit: 0 bytes in 0 blocks
==1087==   total heap usage: 278 allocs, 278 frees, 13,728 bytes allocated
==1087== 
==1087== All heap blocks were freed -- no leaks are possible
==1087== 
==1087== For counts of detected and suppressed errors, rerun with: -v
==1087== Use --track-origins=yes to see where uninitialised values come from
==1087== ERROR SUMMARY: 20 errors from 4 contexts (suppressed: 0 from 0)
Testcase 2: Trying hands with pairs
Valgrind returned an error status
==1092== Memcheck, a memory error detector
==1092== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==1092== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==1092== Command: ./test-eval inp.2.txt
==1092== Parent PID: 1091
==1092== 
==1092== Conditional jump or move depends on uninitialised value(s)
==1092==    at 0x402BC2: ranking_to_string (cards.c:13)
==1092==    by 0x402800: describe_hand (test-eval.c:69)
==1092==    by 0x402A21: main (test-eval.c:116)
==1092== 
==1092== Conditional jump or move depends on uninitialised value(s)
==1092==    at 0x402BC2: ranking_to_string (cards.c:13)
==1092==    by 0x402800: describe_hand (test-eval.c:69)
==1092==    by 0x402A41: main (test-eval.c:119)
==1092== 
==1092== Conditional jump or move depends on uninitialised value(s)
==1092==    at 0x401B62: compare_hands (eval.c:136)
==1092==    by 0x402A96: main (test-eval.c:124)
==1092== 
==1092== Conditional jump or move depends on uninitialised value(s)
==1092==    at 0x401B73: compare_hands (eval.c:138)
==1092==    by 0x402A96: main (test-eval.c:124)
==1092== 
==1092== 
==1092== HEAP SUMMARY:
==1092==     in use at exit: 0 bytes in 0 blocks
==1092==   total heap usage: 232 allocs, 232 frees, 13,028 bytes allocated
==1092== 
==1092== All heap blocks were freed -- no leaks are possible
==1092== 
==1092== For counts of detected and suppressed errors, rerun with: -v
==1092== Use --track-origins=yes to see where uninitialised values come from
==1092== ERROR SUMMARY: 16 errors from 4 contexts (suppressed: 0 from 0)
Testcase 3: Trying hands with 2 pairs
Valgrind returned an error status
==1097== Memcheck, a memory error detector
==1097== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==1097== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==1097== Command: ./test-eval inp.3.txt
==1097== Parent PID: 1096
==1097== 
==1097== Conditional jump or move depends on uninitialised value(s)
==1097==    at 0x402BC2: ranking_to_string (cards.c:13)
==1097==    by 0x402800: describe_hand (test-eval.c:69)
==1097==    by 0x402A21: main (test-eval.c:116)
==1097== 
==1097== Conditional jump or move depends on uninitialised value(s)
==1097==    at 0x402BC2: ranking_to_string (cards.c:13)
==1097==    by 0x402800: describe_hand (test-eval.c:69)
==1097==    by 0x402A41: main (test-eval.c:119)
==1097== 
==1097== Conditional jump or move depends on uninitialised value(s)
==1097==    at 0x401B62: compare_hands (eval.c:136)
==1097==    by 0x402A96: main (test-eval.c:124)
==1097== 
==1097== Conditional jump or move depends on uninitialised value(s)
==1097==    at 0x401B73: compare_hands (eval.c:138)
==1097==    by 0x402A96: main (test-eval.c:124)
==1097== 
==1097== 
==1097== HEAP SUMMARY:
==1097==     in use at exit: 0 bytes in 0 blocks
==1097==   total heap usage: 544 allocs, 544 frees, 18,344 bytes allocated
==1097== 
==1097== All heap blocks were freed -- no leaks are possible
==1097== 
==1097== For counts of detected and suppressed errors, rerun with: -v
==1097== Use --track-origins=yes to see where uninitialised values come from
==1097== ERROR SUMMARY: 40 errors from 4 contexts (suppressed: 0 from 0)
Testcase 4: Trying hands with 3 of a kind
Valgrind returned an error status
==1102== Memcheck, a memory error detector
==1102== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==1102== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==1102== Command: ./test-eval inp.4.txt
==1102== Parent PID: 1101
==1102== 
==1102== Conditional jump or move depends on uninitialised value(s)
==1102==    at 0x402BC2: ranking_to_string (cards.c:13)
==1102==    by 0x402800: describe_hand (test-eval.c:69)
==1102==    by 0x402A21: main (test-eval.c:116)
==1102== 
==1102== Conditional jump or move depends on uninitialised value(s)
==1102==    at 0x402BC2: ranking_to_string (cards.c:13)
==1102==    by 0x402800: describe_hand (test-eval.c:69)
==1102==    by 0x402A41: main (test-eval.c:119)
==1102== 
==1102== Conditional jump or move depends on uninitialised value(s)
==1102==    at 0x401B62: compare_hands (eval.c:136)
==1102==    by 0x402A96: main (test-eval.c:124)
==1102== 
==1102== Conditional jump or move depends on uninitialised value(s)
==1102==    at 0x401B73: compare_hands (eval.c:138)
==1102==    by 0x402A96: main (test-eval.c:124)
==1102== 
==1102== 
==1102== HEAP SUMMARY:
==1102==     in use at exit: 0 bytes in 0 blocks
==1102==   total heap usage: 352 allocs, 352 frees, 15,296 bytes allocated
==1102== 
==1102== All heap blocks were freed -- no leaks are possible
==1102== 
==1102== For counts of detected and suppressed errors, rerun with: -v
==1102== Use --track-origins=yes to see where uninitialised values come from
==1102== ERROR SUMMARY: 24 errors from 4 contexts (suppressed: 0 from 0)
Testcase 5: Trying hands with straights
 Checking the output 
Your file matched the expected output
 - Testcase passed
Testcase 6: Trying hands with flushes
 Checking the output 
Your file matched the expected output
 - Testcase passed
Testcase 7: Trying hands with full houses
Valgrind returned an error status
==1131== Memcheck, a memory error detector
==1131== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==1131== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==1131== Command: ./test-eval inp.7.txt
==1131== Parent PID: 1130
==1131== 
==1131== Conditional jump or move depends on uninitialised value(s)
==1131==    at 0x402BC2: ranking_to_string (cards.c:13)
==1131==    by 0x402800: describe_hand (test-eval.c:69)
==1131==    by 0x402A21: main (test-eval.c:116)
==1131== 
==1131== Conditional jump or move depends on uninitialised value(s)
==1131==    at 0x402BC2: ranking_to_string (cards.c:13)
==1131==    by 0x402800: describe_hand (test-eval.c:69)
==1131==    by 0x402A41: main (test-eval.c:119)
==1131== 
==1131== Conditional jump or move depends on uninitialised value(s)
==1131==    at 0x401B62: compare_hands (eval.c:136)
==1131==    by 0x402A96: main (test-eval.c:124)
==1131== 
==1131== Conditional jump or move depends on uninitialised value(s)
==1131==    at 0x401B73: compare_hands (eval.c:138)
==1131==    by 0x402A96: main (test-eval.c:124)
==1131== 
==1131== 
==1131== HEAP SUMMARY:
==1131==     in use at exit: 0 bytes in 0 blocks
==1131==   total heap usage: 636 allocs, 636 frees, 21,404 bytes allocated
==1131== 
==1131== All heap blocks were freed -- no leaks are possible
==1131== 
==1131== For counts of detected and suppressed errors, rerun with: -v
==1131== Use --track-origins=yes to see where uninitialised values come from
==1131== ERROR SUMMARY: 40 errors from 4 contexts (suppressed: 0 from 0)
Testcase 8: Trying hands with 4 of a kind
Valgrind returned an error status
==1136== Memcheck, a memory error detector
==1136== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==1136== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==1136== Command: ./test-eval inp.8.txt
==1136== Parent PID: 1135
==1136== 
==1136== Conditional jump or move depends on uninitialised value(s)
==1136==    at 0x402BC2: ranking_to_string (cards.c:13)
==1136==    by 0x402800: describe_hand (test-eval.c:69)
==1136==    by 0x402A21: main (test-eval.c:116)
==1136== 
==1136== Conditional jump or move depends on uninitialised value(s)
==1136==    at 0x402BC2: ranking_to_string (cards.c:13)
==1136==    by 0x402800: describe_hand (test-eval.c:69)
==1136==    by 0x402A41: main (test-eval.c:119)
==1136== 
==1136== Conditional jump or move depends on uninitialised value(s)
==1136==    at 0x401B62: compare_hands (eval.c:136)
==1136==    by 0x402A96: main (test-eval.c:124)
==1136== 
==1136== Conditional jump or move depends on uninitialised value(s)
==1136==    at 0x401B73: compare_hands (eval.c:138)
==1136==    by 0x402A96: main (test-eval.c:124)
==1136== 
==1136== 
==1136== HEAP SUMMARY:
==1136==     in use at exit: 0 bytes in 0 blocks
==1136==   total heap usage: 352 allocs, 352 frees, 15,296 bytes allocated
==1136== 
==1136== All heap blocks were freed -- no leaks are possible
==1136== 
==1136== For counts of detected and suppressed errors, rerun with: -v
==1136== Use --track-origins=yes to see where uninitialised values come from
==1136== ERROR SUMMARY: 24 errors from 4 contexts (suppressed: 0 from 0)
Testcase 9: Trying hands with straight flushes
 Checking the output 
Line_77_did_not_match
Line_80_did_not_match
Line_81_did_not_match
Line_94_did_not_match
Your file did not match the expected ouput
 - Output did not match, testcase failed
Hand 1:								Hand 1:
--------							--------
As Ks Qs Js 0s 						      |	AsKsQsJs0s
 - Flush in suit s						 - Flush in suit s
 - Straight flush at index 0					 - Straight flush at index 0
 - The most of a kind is 1 of a kind (at index 0 / value A)	 - The most of a kind is 1 of a kind (at index 0 / value A)
 - No secondary pair						 - No secondary pair
 - evaluate_hand's ranking: STRAIGHT_FLUSH			 - evaluate_hand's ranking: STRAIGHT_FLUSH
 - 5 cards used for hand: As Ks Qs Js 0s 		      |	 - 5 cards used for hand: AsKsQsJs0s
Hand 2:								Hand 2:
--------							--------
Kh Qh Jh 0h 9h 						      |	KhQhJh0h9h
 - Flush in suit h						 - Flush in suit h
 - Straight flush at index 0					 - Straight flush at index 0
 - The most of a kind is 1 of a kind (at index 0 / value K)	 - The most of a kind is 1 of a kind (at index 0 / value K)
 - No secondary pair						 - No secondary pair
 - evaluate_hand's ranking: STRAIGHT_FLUSH			 - evaluate_hand's ranking: STRAIGHT_FLUSH
 - 5 cards used for hand: Kh Qh Jh 0h 9h 		      |	 - 5 cards used for hand: KhQhJh0h9h
Comparison : 							Comparison : 
--------------							--------------
Hand 1 wins!							Hand 1 wins!
============================					============================
Hand 1:								Hand 1:
--------							--------
As Ks Qs Js 0s 9s 8s 					      |	AsKsQsJs0s9s8s
 - Flush in suit s						 - Flush in suit s
 - Straight flush at index 0					 - Straight flush at index 0
 - Straight flush at index 1					 - Straight flush at index 1
 - Straight flush at index 2					 - Straight flush at index 2
 - The most of a kind is 1 of a kind (at index 0 / value A)	 - The most of a kind is 1 of a kind (at index 0 / value A)
 - No secondary pair						 - No secondary pair
 - evaluate_hand's ranking: STRAIGHT_FLUSH			 - evaluate_hand's ranking: STRAIGHT_FLUSH
 - 5 cards used for hand: As Ks Qs Js 0s 		      |	 - 5 cards used for hand: AsKsQsJs0s
Hand 2:								Hand 2:
--------							--------
Kh Qh Jh 0h 9h 8h 7h 					      |	KhQhJh0h9h8h7h
 - Flush in suit h						 - Flush in suit h
 - Straight flush at index 0					 - Straight flush at index 0
 - Straight flush at index 1					 - Straight flush at index 1
 - Straight flush at index 2					 - Straight flush at index 2
 - The most of a kind is 1 of a kind (at index 0 / value K)	 - The most of a kind is 1 of a kind (at index 0 / value K)
 - No secondary pair						 - No secondary pair
 - evaluate_hand's ranking: STRAIGHT_FLUSH			 - evaluate_hand's ranking: STRAIGHT_FLUSH
 - 5 cards used for hand: Kh Qh Jh 0h 9h 		      |	 - 5 cards used for hand: KhQhJh0h9h
Comparison : 							Comparison : 
--------------							--------------
Hand 1 wins!							Hand 1 wins!
============================					============================
Hand 1:								Hand 1:
--------							--------
Ac As Kc Ks Qs Js 0s 					      |	AcAsKcKsQsJs0s
 - Flush in suit s						 - Flush in suit s
 - Straight at index 0						 - Straight at index 0
 - Straight flush at index 1					 - Straight flush at index 1
 - The most of a kind is 2 of a kind (at index 0 / value A)	 - The most of a kind is 2 of a kind (at index 0 / value A)
 - Secondary pair at index 2 (value K)				 - Secondary pair at index 2 (value K)
 - evaluate_hand's ranking: STRAIGHT_FLUSH			 - evaluate_hand's ranking: STRAIGHT_FLUSH
 - 5 cards used for hand: As Ks Qs Js 0s 		      |	 - 5 cards used for hand: AsKsQsJs0s
Hand 2:								Hand 2:
--------							--------
Ad Kh Qh Jh Js 0h 9h 					      |	AdKhQhJhJs0h9h
 - Flush in suit h						 - Flush in suit h
 - Straight at index 0						 - Straight at index 0
 - Straight flush at index 1					 - Straight flush at index 1
 - The most of a kind is 2 of a kind (at index 3 / value J)	 - The most of a kind is 2 of a kind (at index 3 / value J)
 - No secondary pair						 - No secondary pair
 - evaluate_hand's ranking: STRAIGHT_FLUSH			 - evaluate_hand's ranking: STRAIGHT_FLUSH
 - 5 cards used for hand: Kh Qh Jh 0h 9h 		      |	 - 5 cards used for hand: KhQhJh0h9h
Comparison : 							Comparison : 
--------------							--------------
Hand 1 wins!							Hand 1 wins!
============================					============================
Hand 1:								Hand 1:
--------							--------
Ah Kc 5h 4h 3h 2h 					      |	AhKc5h4h3h2h
 - Flush in suit h						 - Flush in suit h
 - Straight flush at index 0				      |	 - Straight at index 0
 - The most of a kind is 1 of a kind (at index 0 / value A)	 - The most of a kind is 1 of a kind (at index 0 / value A)
 - No secondary pair						 - No secondary pair
 - evaluate_hand's ranking: STRAIGHT_FLUSH		      |	 - evaluate_hand's ranking: FLUSH
 - 5 cards used for hand: 5h 4h 3h 2h Ah 		      |	 - 5 cards used for hand: Ah5h4h3h2h
Hand 2:								Hand 2:
--------							--------
Ac 6c 5c 4c 3c 2c 					      |	Ac6c5c4c3c2c
 - Flush in suit c						 - Flush in suit c
 - Straight flush at index 0					 - Straight flush at index 0
 - Straight flush at index 1					 - Straight flush at index 1
 - The most of a kind is 1 of a kind (at index 0 / value A)	 - The most of a kind is 1 of a kind (at index 0 / value A)
 - No secondary pair						 - No secondary pair
 - evaluate_hand's ranking: STRAIGHT_FLUSH			 - evaluate_hand's ranking: STRAIGHT_FLUSH
 - 5 cards used for hand: 5c 4c 3c 2c Ac 		      |	 - 5 cards used for hand: 5c4c3c2cAc
Comparison : 							Comparison : 
--------------							--------------
Tie							      |	Hand 1 wins!
============================					============================
Hand 1:								Hand 1:
--------							--------
As Ks Qs Js 0s 						      |	AsKsQsJs0s
 - Flush in suit s						 - Flush in suit s
 - Straight flush at index 0					 - Straight flush at index 0
 - The most of a kind is 1 of a kind (at index 0 / value A)	 - The most of a kind is 1 of a kind (at index 0 / value A)
 - No secondary pair						 - No secondary pair
 - evaluate_hand's ranking: STRAIGHT_FLUSH			 - evaluate_hand's ranking: STRAIGHT_FLUSH
 - 5 cards used for hand: As Ks Qs Js 0s 		      |	 - 5 cards used for hand: AsKsQsJs0s
Hand 2:								Hand 2:
--------							--------
As 5s 4s 3s 2s 						      |	As5s4s3s2s
 - Flush in suit s						 - Flush in suit s
 - Straight flush at index 0					 - Straight flush at index 0
 - The most of a kind is 1 of a kind (at index 0 / value A)	 - The most of a kind is 1 of a kind (at index 0 / value A)
 - No secondary pair						 - No secondary pair
 - evaluate_hand's ranking: STRAIGHT_FLUSH			 - evaluate_hand's ranking: STRAIGHT_FLUSH
 - 5 cards used for hand: 5s 4s 3s 2s As 		      |	 - 5 cards used for hand: 5s4s3s2sAs
Comparison : 							Comparison : 
--------------							--------------
Hand 1 wins!							Hand 1 wins!
============================					============================
Testcase 10: Trying each type of hand ranking
Valgrind returned an error status
==1154== Memcheck, a memory error detector
==1154== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==1154== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==1154== Command: ./test-eval inp.10.txt
==1154== Parent PID: 1153
==1154== 
==1154== Conditional jump or move depends on uninitialised value(s)
==1154==    at 0x402BC2: ranking_to_string (cards.c:13)
==1154==    by 0x402800: describe_hand (test-eval.c:69)
==1154==    by 0x402A41: main (test-eval.c:119)
==1154== 
==1154== Conditional jump or move depends on uninitialised value(s)
==1154==    at 0x401B62: compare_hands (eval.c:136)
==1154==    by 0x402A96: main (test-eval.c:124)
==1154== 
==1154== Conditional jump or move depends on uninitialised value(s)
==1154==    at 0x401B73: compare_hands (eval.c:138)
==1154==    by 0x402A96: main (test-eval.c:124)
==1154== 
==1154== Conditional jump or move depends on uninitialised value(s)
==1154==    at 0x402BC2: ranking_to_string (cards.c:13)
==1154==    by 0x402800: describe_hand (test-eval.c:69)
==1154==    by 0x402A21: main (test-eval.c:116)
==1154== 
==1154== 
==1154== HEAP SUMMARY:
==1154==     in use at exit: 0 bytes in 0 blocks
==1154==   total heap usage: 3,988 allocs, 3,988 frees, 80,704 bytes allocated
==1154== 
==1154== All heap blocks were freed -- no leaks are possible
==1154== 
==1154== For counts of detected and suppressed errors, rerun with: -v
==1154== Use --track-origins=yes to see where uninitialised values come from
==1154== ERROR SUMMARY: 210 errors from 4 contexts (suppressed: 0 from 0)

Overall Grade: F
