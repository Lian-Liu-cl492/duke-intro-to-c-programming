Grading at Sun Aug 18 18:59:26 UTC 2019
Compiling your code
rm -f test poker cards.o my-test-main.o *~
cc -ggdb3 -Wall -Werror -pedantic -std=gnu99   -c -o deck.o deck.c
cc -ggdb3 -Wall -Werror -pedantic -std=gnu99   -c -o eval.o eval.c
cc -ggdb3 -Wall -Werror -pedantic -std=gnu99   -c -o cards.o cards.c
gcc -o test-eval -ggdb3 deck.o deck-c4.o eval-c4.o eval.o test-eval.o cards.o input.o future.o
Testcase 1: Trying hands with nothing
Valgrind returned an error status
==446== Memcheck, a memory error detector
==446== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==446== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==446== Command: ./test-eval inp.1.txt
==446== Parent PID: 445
==446== 
==446== Conditional jump or move depends on uninitialised value(s)
==446==    at 0x402BBF: ranking_to_string (cards.c:13)
==446==    by 0x4027FD: describe_hand (test-eval.c:69)
==446==    by 0x402A1E: main (test-eval.c:116)
==446== 
==446== Conditional jump or move depends on uninitialised value(s)
==446==    at 0x402BBF: ranking_to_string (cards.c:13)
==446==    by 0x4027FD: describe_hand (test-eval.c:69)
==446==    by 0x402A3E: main (test-eval.c:119)
==446== 
==446== Conditional jump or move depends on uninitialised value(s)
==446==    at 0x401B5F: compare_hands (eval.c:134)
==446==    by 0x402A93: main (test-eval.c:124)
==446== 
==446== Conditional jump or move depends on uninitialised value(s)
==446==    at 0x401B70: compare_hands (eval.c:136)
==446==    by 0x402A93: main (test-eval.c:124)
==446== 
==446== Invalid read of size 8
==446==    at 0x401A1A: build_hand_from_match (eval.c:120)
==446==    by 0x40240B: evaluate_hand (eval.c:287)
==446==    by 0x4027F3: describe_hand (test-eval.c:68)
==446==    by 0x402A1E: main (test-eval.c:116)
==446==  Address 0x520a308 is 0 bytes after a block of size 40 alloc'd
==446==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==446==    by 0x400FD1: add_card_to (deck-c4.c:29)
==446==    by 0x403140: hand_from_string (input.c:49)
==446==    by 0x4029A3: main (test-eval.c:110)
==446== 
==446== Invalid read of size 4
==446==    at 0x401A1D: build_hand_from_match (eval.c:120)
==446==    by 0x40240B: evaluate_hand (eval.c:287)
==446==    by 0x4027F3: describe_hand (test-eval.c:68)
==446==    by 0x402A1E: main (test-eval.c:116)
==446==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==446== 
==446== 
==446== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==446==  Access not within mapped region at address 0x0
==446==    at 0x401A1D: build_hand_from_match (eval.c:120)
==446==    by 0x40240B: evaluate_hand (eval.c:287)
==446==    by 0x4027F3: describe_hand (test-eval.c:68)
==446==    by 0x402A1E: main (test-eval.c:116)
==446==  If you believe this happened as a result of a stack
==446==  overflow in your program's main thread (unlikely but
==446==  possible), you can try to increase the size of the
==446==  main thread stack using the --main-stacksize= flag.
==446==  The main thread stack size used in this run was 8388608.
==446== 
==446== HEAP SUMMARY:
==446==     in use at exit: 864 bytes in 16 blocks
==446==   total heap usage: 202 allocs, 186 frees, 12,472 bytes allocated
==446== 
==446== LEAK SUMMARY:
==446==    definitely lost: 0 bytes in 0 blocks
==446==    indirectly lost: 0 bytes in 0 blocks
==446==      possibly lost: 0 bytes in 0 blocks
==446==    still reachable: 864 bytes in 16 blocks
==446==         suppressed: 0 bytes in 0 blocks
==446== Rerun with --leak-check=full to see details of leaked memory
==446== 
==446== For counts of detected and suppressed errors, rerun with: -v
==446== Use --track-origins=yes to see where uninitialised values come from
==446== ERROR SUMMARY: 14 errors from 6 contexts (suppressed: 0 from 0)
Testcase 2: Trying hands with pairs
Valgrind returned an error status
==451== Memcheck, a memory error detector
==451== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==451== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==451== Command: ./test-eval inp.2.txt
==451== Parent PID: 450
==451== 
==451== Conditional jump or move depends on uninitialised value(s)
==451==    at 0x402BBF: ranking_to_string (cards.c:13)
==451==    by 0x4027FD: describe_hand (test-eval.c:69)
==451==    by 0x402A1E: main (test-eval.c:116)
==451== 
==451== Conditional jump or move depends on uninitialised value(s)
==451==    at 0x402BBF: ranking_to_string (cards.c:13)
==451==    by 0x4027FD: describe_hand (test-eval.c:69)
==451==    by 0x402A3E: main (test-eval.c:119)
==451== 
==451== Conditional jump or move depends on uninitialised value(s)
==451==    at 0x401B5F: compare_hands (eval.c:134)
==451==    by 0x402A93: main (test-eval.c:124)
==451== 
==451== Conditional jump or move depends on uninitialised value(s)
==451==    at 0x401B70: compare_hands (eval.c:136)
==451==    by 0x402A93: main (test-eval.c:124)
==451== 
==451== 
==451== HEAP SUMMARY:
==451==     in use at exit: 0 bytes in 0 blocks
==451==   total heap usage: 232 allocs, 232 frees, 13,028 bytes allocated
==451== 
==451== All heap blocks were freed -- no leaks are possible
==451== 
==451== For counts of detected and suppressed errors, rerun with: -v
==451== Use --track-origins=yes to see where uninitialised values come from
==451== ERROR SUMMARY: 16 errors from 4 contexts (suppressed: 0 from 0)
Testcase 3: Trying hands with 2 pairs
Valgrind returned an error status
==456== Memcheck, a memory error detector
==456== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==456== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==456== Command: ./test-eval inp.3.txt
==456== Parent PID: 455
==456== 
==456== Conditional jump or move depends on uninitialised value(s)
==456==    at 0x402BBF: ranking_to_string (cards.c:13)
==456==    by 0x4027FD: describe_hand (test-eval.c:69)
==456==    by 0x402A1E: main (test-eval.c:116)
==456== 
==456== Conditional jump or move depends on uninitialised value(s)
==456==    at 0x402BBF: ranking_to_string (cards.c:13)
==456==    by 0x4027FD: describe_hand (test-eval.c:69)
==456==    by 0x402A3E: main (test-eval.c:119)
==456== 
==456== Conditional jump or move depends on uninitialised value(s)
==456==    at 0x401B5F: compare_hands (eval.c:134)
==456==    by 0x402A93: main (test-eval.c:124)
==456== 
==456== Conditional jump or move depends on uninitialised value(s)
==456==    at 0x401B70: compare_hands (eval.c:136)
==456==    by 0x402A93: main (test-eval.c:124)
==456== 
==456== 
==456== HEAP SUMMARY:
==456==     in use at exit: 0 bytes in 0 blocks
==456==   total heap usage: 544 allocs, 544 frees, 18,344 bytes allocated
==456== 
==456== All heap blocks were freed -- no leaks are possible
==456== 
==456== For counts of detected and suppressed errors, rerun with: -v
==456== Use --track-origins=yes to see where uninitialised values come from
==456== ERROR SUMMARY: 40 errors from 4 contexts (suppressed: 0 from 0)
Testcase 4: Trying hands with 3 of a kind
Valgrind returned an error status
==461== Memcheck, a memory error detector
==461== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==461== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==461== Command: ./test-eval inp.4.txt
==461== Parent PID: 460
==461== 
==461== Conditional jump or move depends on uninitialised value(s)
==461==    at 0x402BBF: ranking_to_string (cards.c:13)
==461==    by 0x4027FD: describe_hand (test-eval.c:69)
==461==    by 0x402A1E: main (test-eval.c:116)
==461== 
==461== Conditional jump or move depends on uninitialised value(s)
==461==    at 0x402BBF: ranking_to_string (cards.c:13)
==461==    by 0x4027FD: describe_hand (test-eval.c:69)
==461==    by 0x402A3E: main (test-eval.c:119)
==461== 
==461== Conditional jump or move depends on uninitialised value(s)
==461==    at 0x401B5F: compare_hands (eval.c:134)
==461==    by 0x402A93: main (test-eval.c:124)
==461== 
==461== Conditional jump or move depends on uninitialised value(s)
==461==    at 0x401B70: compare_hands (eval.c:136)
==461==    by 0x402A93: main (test-eval.c:124)
==461== 
==461== 
==461== HEAP SUMMARY:
==461==     in use at exit: 0 bytes in 0 blocks
==461==   total heap usage: 352 allocs, 352 frees, 15,296 bytes allocated
==461== 
==461== All heap blocks were freed -- no leaks are possible
==461== 
==461== For counts of detected and suppressed errors, rerun with: -v
==461== Use --track-origins=yes to see where uninitialised values come from
==461== ERROR SUMMARY: 24 errors from 4 contexts (suppressed: 0 from 0)
Testcase 5: Trying hands with straights
Valgrind returned an error status
==466== Memcheck, a memory error detector
==466== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==466== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==466== Command: ./test-eval inp.5.txt
==466== Parent PID: 465
==466== 
==466== Invalid read of size 8
==466==    at 0x401A1A: build_hand_from_match (eval.c:120)
==466==    by 0x40240B: evaluate_hand (eval.c:287)
==466==    by 0x4027F3: describe_hand (test-eval.c:68)
==466==    by 0x402A1E: main (test-eval.c:116)
==466==  Address 0x5207808 is 0 bytes after a block of size 40 alloc'd
==466==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==466==    by 0x400FD1: add_card_to (deck-c4.c:29)
==466==    by 0x403140: hand_from_string (input.c:49)
==466==    by 0x4029A3: main (test-eval.c:110)
==466== 
==466== Invalid read of size 4
==466==    at 0x401A1D: build_hand_from_match (eval.c:120)
==466==    by 0x40240B: evaluate_hand (eval.c:287)
==466==    by 0x4027F3: describe_hand (test-eval.c:68)
==466==    by 0x402A1E: main (test-eval.c:116)
==466==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==466== 
==466== 
==466== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==466==  Access not within mapped region at address 0x0
==466==    at 0x401A1D: build_hand_from_match (eval.c:120)
==466==    by 0x40240B: evaluate_hand (eval.c:287)
==466==    by 0x4027F3: describe_hand (test-eval.c:68)
==466==    by 0x402A1E: main (test-eval.c:116)
==466==  If you believe this happened as a result of a stack
==466==  overflow in your program's main thread (unlikely but
==466==  possible), you can try to increase the size of the
==466==  main thread stack using the --main-stacksize= flag.
==466==  The main thread stack size used in this run was 8388608.
==466== 
==466== HEAP SUMMARY:
==466==     in use at exit: 864 bytes in 16 blocks
==466==   total heap usage: 78 allocs, 62 frees, 10,080 bytes allocated
==466== 
==466== LEAK SUMMARY:
==466==    definitely lost: 0 bytes in 0 blocks
==466==    indirectly lost: 0 bytes in 0 blocks
==466==      possibly lost: 0 bytes in 0 blocks
==466==    still reachable: 864 bytes in 16 blocks
==466==         suppressed: 0 bytes in 0 blocks
==466== Rerun with --leak-check=full to see details of leaked memory
==466== 
==466== For counts of detected and suppressed errors, rerun with: -v
==466== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
Testcase 6: Trying hands with flushes
 Checking the output 
Your file matched the expected output
 - Testcase passed
Testcase 7: Trying hands with full houses
Valgrind returned an error status
==483== Memcheck, a memory error detector
==483== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==483== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==483== Command: ./test-eval inp.7.txt
==483== Parent PID: 482
==483== 
==483== Conditional jump or move depends on uninitialised value(s)
==483==    at 0x402BBF: ranking_to_string (cards.c:13)
==483==    by 0x4027FD: describe_hand (test-eval.c:69)
==483==    by 0x402A1E: main (test-eval.c:116)
==483== 
==483== Conditional jump or move depends on uninitialised value(s)
==483==    at 0x402BBF: ranking_to_string (cards.c:13)
==483==    by 0x4027FD: describe_hand (test-eval.c:69)
==483==    by 0x402A3E: main (test-eval.c:119)
==483== 
==483== Conditional jump or move depends on uninitialised value(s)
==483==    at 0x401B5F: compare_hands (eval.c:134)
==483==    by 0x402A93: main (test-eval.c:124)
==483== 
==483== Conditional jump or move depends on uninitialised value(s)
==483==    at 0x401B70: compare_hands (eval.c:136)
==483==    by 0x402A93: main (test-eval.c:124)
==483== 
==483== 
==483== HEAP SUMMARY:
==483==     in use at exit: 0 bytes in 0 blocks
==483==   total heap usage: 636 allocs, 636 frees, 21,404 bytes allocated
==483== 
==483== All heap blocks were freed -- no leaks are possible
==483== 
==483== For counts of detected and suppressed errors, rerun with: -v
==483== Use --track-origins=yes to see where uninitialised values come from
==483== ERROR SUMMARY: 40 errors from 4 contexts (suppressed: 0 from 0)
Testcase 8: Trying hands with 4 of a kind
Valgrind returned an error status
==488== Memcheck, a memory error detector
==488== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==488== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==488== Command: ./test-eval inp.8.txt
==488== Parent PID: 487
==488== 
==488== Conditional jump or move depends on uninitialised value(s)
==488==    at 0x402BBF: ranking_to_string (cards.c:13)
==488==    by 0x4027FD: describe_hand (test-eval.c:69)
==488==    by 0x402A1E: main (test-eval.c:116)
==488== 
==488== Conditional jump or move depends on uninitialised value(s)
==488==    at 0x402BBF: ranking_to_string (cards.c:13)
==488==    by 0x4027FD: describe_hand (test-eval.c:69)
==488==    by 0x402A3E: main (test-eval.c:119)
==488== 
==488== Conditional jump or move depends on uninitialised value(s)
==488==    at 0x401B5F: compare_hands (eval.c:134)
==488==    by 0x402A93: main (test-eval.c:124)
==488== 
==488== Conditional jump or move depends on uninitialised value(s)
==488==    at 0x401B70: compare_hands (eval.c:136)
==488==    by 0x402A93: main (test-eval.c:124)
==488== 
==488== 
==488== HEAP SUMMARY:
==488==     in use at exit: 0 bytes in 0 blocks
==488==   total heap usage: 352 allocs, 352 frees, 15,296 bytes allocated
==488== 
==488== All heap blocks were freed -- no leaks are possible
==488== 
==488== For counts of detected and suppressed errors, rerun with: -v
==488== Use --track-origins=yes to see where uninitialised values come from
==488== ERROR SUMMARY: 24 errors from 4 contexts (suppressed: 0 from 0)
Testcase 9: Trying hands with straight flushes
 Checking the output 
Line_54_did_not_match
Line_63_did_not_match
Line_75_did_not_match
Line_76_did_not_match
Line_83_did_not_match
Line_84_did_not_match
Line_87_did_not_match
Line_104_did_not_match
Line_105_did_not_match
Line_108_did_not_match
Your file did not match the expected ouput
 - Output did not match, testcase failed
Hand 1:								Hand 1:
--------							--------
As Ks Qs Js 0s 						      |	AsKsQsJs0s
 - Flush in suit s						 - Flush in suit s
 - Straight flush at index 0					 - Straight flush at index 0
 - The most of a kind is 1 of a kind (at index 0 / value A)	 - The most of a kind is 1 of a kind (at index 0 / value A)
 - No secondary pair						 - No secondary pair
 - evaluate_hand's ranking: STRAIGHT_FLUSH			 - evaluate_hand's ranking: STRAIGHT_FLUSH
 - 5 cards used for hand: As Ks Qs Js 0s 		      |	 - 5 cards used for hand: AsKsQsJs0s
Hand 2:								Hand 2:
--------							--------
Kh Qh Jh 0h 9h 						      |	KhQhJh0h9h
 - Flush in suit h						 - Flush in suit h
 - Straight flush at index 0					 - Straight flush at index 0
 - The most of a kind is 1 of a kind (at index 0 / value K)	 - The most of a kind is 1 of a kind (at index 0 / value K)
 - No secondary pair						 - No secondary pair
 - evaluate_hand's ranking: STRAIGHT_FLUSH			 - evaluate_hand's ranking: STRAIGHT_FLUSH
 - 5 cards used for hand: Kh Qh Jh 0h 9h 		      |	 - 5 cards used for hand: KhQhJh0h9h
Comparison : 							Comparison : 
--------------							--------------
Hand 1 wins!							Hand 1 wins!
============================					============================
Hand 1:								Hand 1:
--------							--------
As Ks Qs Js 0s 9s 8s 					      |	AsKsQsJs0s9s8s
 - Flush in suit s						 - Flush in suit s
 - Straight flush at index 0					 - Straight flush at index 0
 - Straight flush at index 1					 - Straight flush at index 1
 - Straight flush at index 2				      <
 - The most of a kind is 1 of a kind (at index 0 / value A)	 - The most of a kind is 1 of a kind (at index 0 / value A)
 - No secondary pair						 - No secondary pair
 - evaluate_hand's ranking: STRAIGHT_FLUSH			 - evaluate_hand's ranking: STRAIGHT_FLUSH
 - 5 cards used for hand: As Ks Qs Js 0s 		      |	 - 5 cards used for hand: AsKsQsJs0s
Hand 2:								Hand 2:
--------							--------
Kh Qh Jh 0h 9h 8h 7h 					      |	KhQhJh0h9h8h7h
 - Flush in suit h						 - Flush in suit h
 - Straight flush at index 0					 - Straight flush at index 0
 - Straight flush at index 1					 - Straight flush at index 1
 - Straight flush at index 2				      <
 - The most of a kind is 1 of a kind (at index 0 / value K)	 - The most of a kind is 1 of a kind (at index 0 / value K)
 - No secondary pair						 - No secondary pair
 - evaluate_hand's ranking: STRAIGHT_FLUSH			 - evaluate_hand's ranking: STRAIGHT_FLUSH
 - 5 cards used for hand: Kh Qh Jh 0h 9h 		      |	 - 5 cards used for hand: KhQhJh0h9h
Comparison : 							Comparison : 
--------------							--------------
Hand 1 wins!							Hand 1 wins!
============================					============================
Hand 1:								Hand 1:
--------							--------
Ac As Kc Ks Qs Js 0s 					      |	AcAsKcKsQsJs0s
 - Flush in suit s						 - Flush in suit s
 - Straight at index 0						 - Straight at index 0
 - Straight flush at index 1				      <
 - The most of a kind is 2 of a kind (at index 0 / value A)	 - The most of a kind is 2 of a kind (at index 0 / value A)
 - Secondary pair at index 2 (value K)				 - Secondary pair at index 2 (value K)
 - evaluate_hand's ranking: STRAIGHT_FLUSH		      |	 - evaluate_hand's ranking: FLUSH
 - 5 cards used for hand: As Ks Qs Js 0s 		      |	 - 5 cards used for hand: AsKsQsJs0s
Hand 2:								Hand 2:
--------							--------
Ad Kh Qh Jh Js 0h 9h 					      |	AdKhQhJhJs0h9h
 - Flush in suit h						 - Flush in suit h
 - Straight at index 0						 - Straight at index 0
 - Straight flush at index 1				      <
 - The most of a kind is 2 of a kind (at index 3 / value J)	 - The most of a kind is 2 of a kind (at index 3 / value J)
 - No secondary pair						 - No secondary pair
 - evaluate_hand's ranking: STRAIGHT_FLUSH		      |	 - evaluate_hand's ranking: FLUSH
 - 5 cards used for hand: Kh Qh Jh 0h 9h 		      |	 - 5 cards used for hand: KhQhJh0h9h
Comparison : 							Comparison : 
--------------							--------------
Hand 1 wins!							Hand 1 wins!
============================					============================
Hand 1:								Hand 1:
--------							--------
Ah Kc 5h 4h 3h 2h 					      |	AhKc5h4h3h2h
 - Flush in suit h						 - Flush in suit h
 - Straight flush at index 0				      <
 - The most of a kind is 1 of a kind (at index 0 / value A)	 - The most of a kind is 1 of a kind (at index 0 / value A)
 - No secondary pair						 - No secondary pair
 - evaluate_hand's ranking: STRAIGHT_FLUSH		      |	 - evaluate_hand's ranking: FLUSH
 - 5 cards used for hand: 5h 4h 3h 2h Ah 		      |	 - 5 cards used for hand: Ah5h4h3h2h
Hand 2:								Hand 2:
--------							--------
Ac 6c 5c 4c 3c 2c 					      |	Ac6c5c4c3c2c
 - Flush in suit c						 - Flush in suit c
 - Straight flush at index 0				      <
 - Straight flush at index 1				      <
 - The most of a kind is 1 of a kind (at index 0 / value A)	 - The most of a kind is 1 of a kind (at index 0 / value A)
 - No secondary pair						 - No secondary pair
 - evaluate_hand's ranking: STRAIGHT_FLUSH		      |	 - evaluate_hand's ranking: FLUSH
 - 5 cards used for hand: 5c 4c 3c 2c Ac 		      |	 - 5 cards used for hand: Ac6c5c4c3c
Comparison : 							Comparison : 
--------------							--------------
Tie							      |	Hand 2 wins!
============================					============================
Hand 1:								Hand 1:
--------							--------
As Ks Qs Js 0s 						      |	AsKsQsJs0s
 - Flush in suit s						 - Flush in suit s
 - Straight flush at index 0					 - Straight flush at index 0
 - The most of a kind is 1 of a kind (at index 0 / value A)	 - The most of a kind is 1 of a kind (at index 0 / value A)
 - No secondary pair						 - No secondary pair
 - evaluate_hand's ranking: STRAIGHT_FLUSH			 - evaluate_hand's ranking: STRAIGHT_FLUSH
 - 5 cards used for hand: As Ks Qs Js 0s 		      |	 - 5 cards used for hand: AsKsQsJs0s
Hand 2:								Hand 2:
--------							--------
As 5s 4s 3s 2s 						      |	As5s4s3s2s
 - Flush in suit s						 - Flush in suit s
 - Straight flush at index 0				      <
 - The most of a kind is 1 of a kind (at index 0 / value A)	 - The most of a kind is 1 of a kind (at index 0 / value A)
 - No secondary pair						 - No secondary pair
 - evaluate_hand's ranking: STRAIGHT_FLUSH		      |	 - evaluate_hand's ranking: FLUSH
 - 5 cards used for hand: 5s 4s 3s 2s As 		      |	 - 5 cards used for hand: As5s4s3s2s
Comparison : 							Comparison : 
--------------							--------------
Hand 1 wins!						      |	Hand 2 wins!
============================					============================
Testcase 10: Trying each type of hand ranking
Valgrind returned an error status
==506== Memcheck, a memory error detector
==506== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==506== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==506== Command: ./test-eval inp.10.txt
==506== Parent PID: 505
==506== 
==506== Conditional jump or move depends on uninitialised value(s)
==506==    at 0x402BBF: ranking_to_string (cards.c:13)
==506==    by 0x4027FD: describe_hand (test-eval.c:69)
==506==    by 0x402A3E: main (test-eval.c:119)
==506== 
==506== Conditional jump or move depends on uninitialised value(s)
==506==    at 0x401B5F: compare_hands (eval.c:134)
==506==    by 0x402A93: main (test-eval.c:124)
==506== 
==506== Conditional jump or move depends on uninitialised value(s)
==506==    at 0x401B70: compare_hands (eval.c:136)
==506==    by 0x402A93: main (test-eval.c:124)
==506== 
==506== Conditional jump or move depends on uninitialised value(s)
==506==    at 0x402BBF: ranking_to_string (cards.c:13)
==506==    by 0x4027FD: describe_hand (test-eval.c:69)
==506==    by 0x402A1E: main (test-eval.c:116)
==506== 
==506== 
==506== HEAP SUMMARY:
==506==     in use at exit: 0 bytes in 0 blocks
==506==   total heap usage: 3,988 allocs, 3,988 frees, 80,704 bytes allocated
==506== 
==506== All heap blocks were freed -- no leaks are possible
==506== 
==506== For counts of detected and suppressed errors, rerun with: -v
==506== Use --track-origins=yes to see where uninitialised values come from
==506== ERROR SUMMARY: 210 errors from 4 contexts (suppressed: 0 from 0)

Overall Grade: F
