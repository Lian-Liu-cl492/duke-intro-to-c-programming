Grading at Fri Jan  3 03:33:44 UTC 2020
Compiling cards.c -> cards.o
Compiling deck.c -> deck.o
Compiling input.c -> input.o
Compiling future.c -> future.o
Linking input.o, future.o deck.o, cards.o, and our tester
Testing with input file with 
 o 1 hand
 o No unknown/future cards
Valgrind reported errors:
==1297== Memcheck, a memory error detector
==1297== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==1297== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==1297== Command: ./tester hands.txt draw.txt
==1297== Parent PID: 1296
==1297== 
==1297== Invalid read of size 1
==1297==    at 0x400B0D: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==1297==    by 0x400C51: read_input (in /graderhome/work/c4prj2_input/tester)
==1297==    by 0x401A43: main (test-input.c:69)
==1297==  Address 0x1 is not stack'd, malloc'd or (recently) free'd
==1297== 
==1297== 
==1297== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==1297==  Access not within mapped region at address 0x1
==1297==    at 0x400B0D: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==1297==    by 0x400C51: read_input (in /graderhome/work/c4prj2_input/tester)
==1297==    by 0x401A43: main (test-input.c:69)
==1297==  If you believe this happened as a result of a stack
==1297==  overflow in your program's main thread (unlikely but
==1297==  possible), you can try to increase the size of the
==1297==  main thread stack using the --main-stacksize= flag.
==1297==  The main thread stack size used in this run was 8388608.
==1297== 
==1297== HEAP SUMMARY:
==1297==     in use at exit: 808 bytes in 12 blocks
==1297==   total heap usage: 19 allocs, 7 frees, 5,072 bytes allocated
==1297== 
==1297== LEAK SUMMARY:
==1297==    definitely lost: 0 bytes in 0 blocks
==1297==    indirectly lost: 0 bytes in 0 blocks
==1297==      possibly lost: 0 bytes in 0 blocks
==1297==    still reachable: 808 bytes in 12 blocks
==1297==         suppressed: 0 bytes in 0 blocks
==1297== Rerun with --leak-check=full to see details of leaked memory
==1297== 
==1297== For counts of detected and suppressed errors, rerun with: -v
==1297== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Testing with input file with 
 o Many hands
 o No unknown/future cards
Valgrind reported errors:
==1302== Memcheck, a memory error detector
==1302== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==1302== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==1302== Command: ./tester hands.txt draw.txt
==1302== Parent PID: 1301
==1302== 
==1302== Invalid read of size 1
==1302==    at 0x400B0D: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==1302==    by 0x400C51: read_input (in /graderhome/work/c4prj2_input/tester)
==1302==    by 0x401A43: main (test-input.c:69)
==1302==  Address 0x1 is not stack'd, malloc'd or (recently) free'd
==1302== 
==1302== 
==1302== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==1302==  Access not within mapped region at address 0x1
==1302==    at 0x400B0D: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==1302==    by 0x400C51: read_input (in /graderhome/work/c4prj2_input/tester)
==1302==    by 0x401A43: main (test-input.c:69)
==1302==  If you believe this happened as a result of a stack
==1302==  overflow in your program's main thread (unlikely but
==1302==  possible), you can try to increase the size of the
==1302==  main thread stack using the --main-stacksize= flag.
==1302==  The main thread stack size used in this run was 8388608.
==1302== 
==1302== HEAP SUMMARY:
==1302==     in use at exit: 808 bytes in 12 blocks
==1302==   total heap usage: 19 allocs, 7 frees, 5,072 bytes allocated
==1302== 
==1302== LEAK SUMMARY:
==1302==    definitely lost: 0 bytes in 0 blocks
==1302==    indirectly lost: 0 bytes in 0 blocks
==1302==      possibly lost: 0 bytes in 0 blocks
==1302==    still reachable: 808 bytes in 12 blocks
==1302==         suppressed: 0 bytes in 0 blocks
==1302== Rerun with --leak-check=full to see details of leaked memory
==1302== 
==1302== For counts of detected and suppressed errors, rerun with: -v
==1302== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Testing with input file with 
 o Many hands
 o 1 unknown/future cards per hand
Valgrind reported errors:
==1308== Memcheck, a memory error detector
==1308== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==1308== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==1308== Command: ./tester h.txt d.txt
==1308== Parent PID: 1307
==1308== 
==1308== Invalid read of size 8
==1308==    at 0x400D71: add_future_card (in /graderhome/work/c4prj2_input/tester)
==1308==    by 0x400B61: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==1308==    by 0x400C51: read_input (in /graderhome/work/c4prj2_input/tester)
==1308==    by 0x401A43: main (test-input.c:69)
==1308==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==1308== 
==1308== 
==1308== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==1308==  Access not within mapped region at address 0x8
==1308==    at 0x400D71: add_future_card (in /graderhome/work/c4prj2_input/tester)
==1308==    by 0x400B61: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==1308==    by 0x400C51: read_input (in /graderhome/work/c4prj2_input/tester)
==1308==    by 0x401A43: main (test-input.c:69)
==1308==  If you believe this happened as a result of a stack
==1308==  overflow in your program's main thread (unlikely but
==1308==  possible), you can try to increase the size of the
==1308==  main thread stack using the --main-stacksize= flag.
==1308==  The main thread stack size used in this run was 8388608.
==1308== 
==1308== HEAP SUMMARY:
==1308==     in use at exit: 808 bytes in 12 blocks
==1308==   total heap usage: 19 allocs, 7 frees, 5,072 bytes allocated
==1308== 
==1308== LEAK SUMMARY:
==1308==    definitely lost: 0 bytes in 0 blocks
==1308==    indirectly lost: 0 bytes in 0 blocks
==1308==      possibly lost: 0 bytes in 0 blocks
==1308==    still reachable: 808 bytes in 12 blocks
==1308==         suppressed: 0 bytes in 0 blocks
==1308== Rerun with --leak-check=full to see details of leaked memory
==1308== 
==1308== For counts of detected and suppressed errors, rerun with: -v
==1308== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Testing with input file with 
 o Many hands
 o Many unknown/future cards per hand
Valgrind reported errors:
==1314== Memcheck, a memory error detector
==1314== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==1314== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==1314== Command: ./tester i1 i2
==1314== Parent PID: 1313
==1314== 
==1314== Invalid read of size 8
==1314==    at 0x400D71: add_future_card (in /graderhome/work/c4prj2_input/tester)
==1314==    by 0x400B61: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==1314==    by 0x400C51: read_input (in /graderhome/work/c4prj2_input/tester)
==1314==    by 0x401A43: main (test-input.c:69)
==1314==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==1314== 
==1314== 
==1314== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==1314==  Access not within mapped region at address 0x8
==1314==    at 0x400D71: add_future_card (in /graderhome/work/c4prj2_input/tester)
==1314==    by 0x400B61: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==1314==    by 0x400C51: read_input (in /graderhome/work/c4prj2_input/tester)
==1314==    by 0x401A43: main (test-input.c:69)
==1314==  If you believe this happened as a result of a stack
==1314==  overflow in your program's main thread (unlikely but
==1314==  possible), you can try to increase the size of the
==1314==  main thread stack using the --main-stacksize= flag.
==1314==  The main thread stack size used in this run was 8388608.
==1314== 
==1314== HEAP SUMMARY:
==1314==     in use at exit: 760 bytes in 9 blocks
==1314==   total heap usage: 13 allocs, 4 frees, 4,904 bytes allocated
==1314== 
==1314== LEAK SUMMARY:
==1314==    definitely lost: 0 bytes in 0 blocks
==1314==    indirectly lost: 0 bytes in 0 blocks
==1314==      possibly lost: 0 bytes in 0 blocks
==1314==    still reachable: 760 bytes in 9 blocks
==1314==         suppressed: 0 bytes in 0 blocks
==1314== Rerun with --leak-check=full to see details of leaked memory
==1314== 
==1314== For counts of detected and suppressed errors, rerun with: -v
==1314== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)

Overall Grade: F
