Grading at Fri Jan  3 02:10:57 UTC 2020
Compiling cards.c -> cards.o
Compiling deck.c -> deck.o
Compiling input.c -> input.o
Compiling future.c -> future.o
future.c: In function ‘add_future_card’:
future.c:5:56: error: invalid operands to binary * (have ‘deck_t {aka struct deck_tag}’ and ‘size_t {aka long unsigned int}’)
     fc->decks = realloc(fc->decks, sizeof(*(fc->decks) * index);
                                                        ^
future.c:5:64: error: expected ‘)’ before ‘;’ token
     fc->decks = realloc(fc->decks, sizeof(*(fc->decks) * index);
                                                                ^
future.c:7:3: error: expected ‘;’ before ‘}’ token
   }
   ^
future.c:8:19: error: incompatible types when initializing type ‘deck_t * {aka struct deck_tag *}’ using type ‘deck_t {aka struct deck_tag}’
   deck_t * deck = fc->decks[index];
                   ^
future.c: In function ‘future_cards_from_deck’:
future.c:16:5: error: implicit declaration of function ‘perror’ [-Werror=implicit-function-declaration]
     perror("The deck does not have enough cards!");
     ^
future.c:20:9: error: ISO C forbids nested functions [-Werror=pedantic]
     for(int j<0; j<fc->decks[i]->n_cards; j++){
         ^
future.c:20:14: error: expected ‘=’, ‘,’, ‘;’, ‘asm’ or ‘__attribute__’ before ‘<’ token
     for(int j<0; j<fc->decks[i]->n_cards; j++){
              ^
future.c:20:18: error: ‘j’ undeclared (first use in this function)
     for(int j<0; j<fc->decks[i]->n_cards; j++){
                  ^
future.c:20:18: note: each undeclared identifier is reported only once for each function it appears in
future.c:20:32: error: invalid type argument of ‘->’ (have ‘deck_t {aka struct deck_tag}’)
     for(int j<0; j<fc->decks[i]->n_cards; j++){
                                ^
future.c:20:41: error: expected ‘)’ before ‘;’ token
     for(int j<0; j<fc->decks[i]->n_cards; j++){
                                         ^
future.c:21:19: error: invalid type argument of ‘->’ (have ‘deck_t {aka struct deck_tag}’)
       fc->decks[i]->cards[j]->value = deck->cards[i]->value;
                   ^
future.c:22:19: error: invalid type argument of ‘->’ (have ‘deck_t {aka struct deck_tag}’)
       fc->decks[i]->cards[j]->suit = deck->cards[i]->suit;
                   ^
cc1: all warnings being treated as errors
Compilation of future.c failed

Overall Grade: F
